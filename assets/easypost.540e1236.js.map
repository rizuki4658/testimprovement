{"version":3,"file":"easypost.540e1236.js","sources":["../../src/composable/integration/easypost.js"],"sourcesContent":["import { reactive, computed, ref } from 'vue'\nimport { useStore } from 'vuex'\nimport { required } from '@/validations/index'\nimport { isFunction } from 'utils/is'\n\nexport const useConnect = () => {\n  const store = useStore()\n  const rules = reactive({\n    api_key: {\n      required\n    }\n  })\n\n  const credentials = computed(\n    () => store.state.integration.easypost.connect.credentials\n  )\n  const loading = computed(\n    () => store.state.integration.easypost.loading.connect\n  )\n\n  const setCredential = (credentials) =>\n    store.commit('integration/easypost/SET_CREDENTIAL', credentials)\n  const connect = async () => {\n    try {\n      store.commit('integration/easypost/SET_CONNECT_LOADING', true)\n      await store.dispatch('integration/easypost/connect')\n    } finally {\n      store.commit('integration/easypost/SET_CONNECT_LOADING', false)\n    }\n  }\n  return {\n    loading,\n    rules,\n    credentials,\n    setCredential,\n    connect\n  }\n}\n\nexport const useShippingKit = () => {\n  const store = useStore()\n  const loading = computed(\n    () => store.state.integration.easypost.loading.shippingKit\n  )\n  const shippingKit = computed({\n    get: () => ({ ...store.state.integration.easypost.shippingKit }),\n    set: (newValue) => {\n      store.commit('integration/easypost/SET_SHIPPING_KIT', newValue)\n    }\n  })\n  const fetchShippingKit = async () => {\n    try {\n      store.commit('integration/easypost/SET_LOADING_FETCH_SHIPPING_KIT', true)\n      // await store.dispatch('integration/easypost/fetchShippingKit')\n    } finally {\n      store.commit('integration/easypost/SET_LOADING_FETCH_SHIPPING_KIT', false)\n    }\n  }\n  const updateShippingKit = async () => {\n    try {\n      store.commit('integration/easypost/SET_LOADING_UPDATE_SHIPPING_KIT', true)\n      // await store.dispatch('integration/easypost/updateShippingKit')\n    } finally {\n      store.commit(\n        'integration/easypost/SET_LOADING_UPDATE_SHIPPING_KIT',\n        false\n      )\n    }\n  }\n  return {\n    store,\n    loading,\n    shippingKit,\n    fetchShippingKit,\n    updateShippingKit\n  }\n}\n\nexport const useShippingProvider = () => {\n  const store = useStore()\n  const carriers = computed(\n    () => store.state.integration.easypost.shippingProvider.carriers\n  )\n  const filters = computed(\n    () => store.state.integration.easypost.shippingProvider.filters\n  )\n  const selectedCarrier = computed(\n    () => store.getters['integration/easypost/selectedCarrier']\n  )\n  const loading = computed(() => store.state.integration.easypost.loading)\n  const status = computed(() => store.state.integration.easypost.status)\n  const fetchAll = async () => {\n    try {\n      store.commit('integration/easypost/SET_LOADING_FETCH_ALL', true)\n      await store.dispatch('integration/easypost/fetchAll')\n    } finally {\n      store.commit('integration/easypost/SET_LOADING_FETCH_ALL', false)\n    }\n  }\n  const updateCarrier = async (callback = () => {}) => {\n    try {\n      store.commit('integration/easypost/SET_LOADING_UPDATE_CARRIER', true)\n      await store.dispatch('integration/easypost/updateCarrier')\n      isFunction(callback) && callback(null, null)\n    } catch (err) {\n      isFunction(callback) && callback(err, null)\n    } finally {\n      store.commit('integration/easypost/SET_LOADING_UPDATE_CARRIER', false)\n    }\n  }\n  const selectCarrier = (carrier) =>\n    store.commit('integration/easypost/SET_SELECTED_CARRIER', carrier)\n  const resetSelectedCarrier = () =>\n    store.commit('integration/easypost/RESET_SELECTED_CARRIER')\n  return {\n    loading,\n    carriers,\n    filters,\n    status,\n    selectedCarrier,\n    fetchAll,\n    updateCarrier,\n    selectCarrier,\n    resetSelectedCarrier\n  }\n}\n\nexport const useConfig = () => {\n  const store = useStore()\n  const loading = computed(() => store.state.integration.easypost.loading)\n  const tabs = computed(() => [\n    {\n      id: 1,\n      name: 'Shipping Provider',\n      to: {\n        name: 'integrationEasypostConfigShippingProvider'\n      }\n    },\n    // {\n    //   id: 2,\n    //   name: 'Edit Shipping Kit',\n    //   to: {\n    //     name: 'integrationEasypostConfigShippingKit'\n    //   }\n    // }\n  ])\n  const checkIntegrationStatus = async () => {\n    try {\n      store.commit('integration/easypost/SET_LOADING_INTEGRATION_CHECKS', true)\n      const integrations = await store.dispatch('integration/all')\n      const integration = integrations.find(\n        (integration) => integration.id == 17\n      )\n      return integration?.is_ready == 1\n    } finally {\n      store.commit('integration/easypost/SET_LOADING_INTEGRATION_CHECKS', false)\n    }\n  }\n\n  return {\n    tabs,\n    loading,\n    checkIntegrationStatus\n  }\n}\n\nexport const useStatus = () => {\n  const store = useStore()\n  const status = computed(() => store.state.integration.easypost.status)\n  const loading = computed(\n    () => store.state.integration.easypost.loading.shippingProvider.fetchAll\n  )\n  const { fetchAll: fetchStatus } = useShippingProvider()\n  return {\n    status,\n    loading,\n    fetchStatus\n  }\n}\n\nexport const useActivation = () => {\n  const store = useStore()\n  const address = reactive({\n    valid: 'valid',\n    route: 'street',\n    locality: 'city',\n    administrative_area_level_1: 'state',\n    postal_code: 'zip_code',\n    formatted_address: 'address_text',\n    bypassValidation: false,\n    restrictCountries: [],\n    geo: {\n      lat: 'lat',\n      lng: 'lon'\n    }\n  })\n  const data = reactive({\n    company_email: '',\n    address_text: '',\n    street: '',\n    state: '',\n    city: '',\n    zip_code: '',\n    phone: ''\n  })\n  const loading = ref(false)\n\n  const fetch = async (callback = () => {}) => {\n    try {\n      loading.value = true\n      const response = await store.dispatch('integration/easypost/fetchActivationUSPS')\n      isFunction(callback) && callback(response)\n    } finally {\n      loading.value = false\n    }\n  }\n\n  const create = async (payload, callback = () => {}) => {\n    try {\n      loading.value = true\n      await store.dispatch('integration/easypost/createActivationUSPS', payload)\n      isFunction(callback) && callback()\n    } finally {\n      loading.value = false\n    }\n  }\n\n  return {\n    address,\n    loading,\n    fetch,\n    create,\n    data\n  }\n}\n"],"names":["useConnect","store","useStore","rules","reactive","api_key","required","credentials","computed","state","integration","easypost","connect","loading","setCredential","credentials2","commit","async","dispatch","useShippingKit","shippingKit","get","__spreadValues","set","newValue","fetchShippingKit","updateShippingKit","useShippingProvider","carriers","shippingProvider","filters","selectedCarrier","getters","status","fetchAll","updateCarrier","callback","isFunction","err","selectCarrier","carrier","resetSelectedCarrier","useConfig","tabs","id","name","to","checkIntegrationStatus","find","integration2","is_ready","useStatus","fetchStatus","useActivation","address","valid","route","locality","administrative_area_level_1","postal_code","formatted_address","bypassValidation","restrictCountries","geo","lat","lng","data","company_email","address_text","street","city","zip_code","phone","ref","fetch","value","response","create","payload"],"mappings":"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"}