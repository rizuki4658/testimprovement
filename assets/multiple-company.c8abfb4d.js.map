{"version":3,"file":"multiple-company.c8abfb4d.js","sources":["../../src/store/pinia/user.js","../../src/store/pinia/layouts/multiple-company.js"],"sourcesContent":["import { defineStore } from 'pinia'\nimport request from 'utils/request'\n\nexport const useUser = defineStore('user', {\n  state: () => ({}),\n  getters: {},\n  actions: {\n    async $loginToken(payload) {\n      await request({\n        url: '/v1/pos/login/token',\n        method: 'post',\n        data: {\n          ...(\n            typeof payload !== 'object'\n              ? { token: payload }\n              : {\n                token: payload.token,\n                company_token: payload.company\n              }\n          )\n        }\n      })\n    }\n  }\n})\n","import { defineStore } from 'pinia'\nimport { useSetting } from '../setting'\nimport { useUser } from '../user'\nimport request from 'utils/request'\nimport store from 'store'\nimport { computed } from 'vue'\n\nexport const useMultipleCompany = defineStore('multipleCompany', {\n  state: () => ({\n    company: {\n      isLoading: false,\n      result: null,\n      active: null,\n      isGhost: null,\n    },\n    companyDetail: {\n      isLoading: false,\n      modal: false,\n      result: false,\n      token: null\n    },\n    unlink: {\n      isLoading: false,\n      modal: false\n    }\n  }),\n  getters: {\n    companies(state) {\n      return computed(() => state?.company?.result ?? [])\n    },\n    activeCompany(state) {\n      return computed(() => state.company?.active?.name ?? 'Default Company')\n    },\n    isMultipleAccount() {\n      return computed(() => !window.location.origin.includes('usedproducts'))\n    },\n    isGhost(state) {\n      return computed(() => state.company.isGhost)\n    }\n  },\n  actions: { \n    generateStatus(company) {\n      if (company.subscription_status == 1 && company.trial_end) {\n        const dateNow = new Date(Date.now())\n        const date = new Date(company.trial_end)\n        const diffTime = Math.abs(date - dateNow)\n        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24))\n\n        return ({\n          ...company,\n          class_alert: 'bg-orange-01',\n          class_text: 'text-orange-04',\n          class_dot: 'bg-orange-04',\n          text: `Trial Ends in`,\n          days: diffDays\n        })\n      }\n\n      if (company.subscription_status == 2) return ({\n        ...company,\n        class_alert: 'bg-red-01',\n        class_text: 'text-red-04',\n        class_dot: 'bg-red-04',\n        text: 'Unpaid Billing'\n      })\n\n      if (company.subscription_status == 3) return ({\n        ...company,\n        class_alert: 'bg-orange-01',\n        class_text: 'text-orange-04',\n        class_dot: 'bg-orange-04',\n        text: 'Subscribe Cancelled'\n      })\n\n      return ({\n        ...company,\n        class_alert: null,\n        class_text: null,\n        text: null\n      })\n    },\n    generateList(companies) {\n      return companies.filter(company => company.name && company).map(company => ({\n        ...this.generateStatus(company)\n      }))\n    },\n    async $getCompanies(force = false) {\n      const companyList = store?.state?.user?.me?.companies ?? []\n      if (companyList && !force) {\n        this.company.result = this.generateList(companyList)\n      } else {\n        await store.dispatch('user/me')\n        this.company.result = this.generateList(store?.state?.user?.me?.companies ?? [])\n      }\n    },\n    async $getActiveCompany() {\n      const storeSetting = useSetting()\n      const activates = storeSetting.company.form ?? undefined\n      if (activates) {\n        this.company.active = activates\n      } else {\n        await storeSetting.$getSettingCompanyProfile()\n        this.company.active = storeSetting.company.form\n      }\n\n    },\n    async $getIsGhost() {\n      const isGhost = store?.state?.user?.me?.is_ghost ?? 0\n      this.company.isGhost = isGhost ? true : false\n    },\n    async $getBulkMultipleCompany() {\n      await this.$getCompanies()\n      await this.$getActiveCompany()\n      await this.$getIsGhost()\n    },\n    async $getCompany(payload) {\n      const response = await request({\n        url: `/v1/config/company/show`,\n        method: 'get',\n        params: {\n          ...payload,\n          company_code: this.companyDetail.token\n        }\n      })\n      this.companyDetail.result = response\n    },\n    async $updateMultipleCompany(payload) {\n      this.company.isLoading = true\n      this.company.active.name = payload.name\n      const selectedIndex = this.company?.result?.findIndex(company => company.is_selected) ?? -1\n      if (this.company?.result[selectedIndex]) this.company.result[selectedIndex].name = payload.name\n      this.company.isLoading = false\n    },\n    async $unlinkAccount() {\n      if (!this.companyDetail.token) return\n      await request({\n        url: `/v1/config/company/unlink`,\n        method: 'post',\n        data: {\n          company_code: this.companyDetail.token\n        }\n      })\n    },\n    async $switchCompany(payload) {\n      const storeUser = useUser()\n      await storeUser.$loginToken(payload)\n    }\n  }\n})"],"names":["useUser","defineStore","state","getters","actions","[object Object]","payload","request","url","method","data","__spreadValues","token","company_token","company","useMultipleCompany","isLoading","result","active","isGhost","companyDetail","modal","unlink","companies","computed","_b","_a","activeCompany","_c","name","isMultipleAccount","window","location","origin","includes","subscription_status","trial_end","dateNow","Date","now","date","diffTime","Math","abs","diffDays","ceil","__spreadProps","class_alert","class_text","class_dot","text","days","filter","map","this","generateStatus","force","companyList","user","me","_d","_e","generateList","store","dispatch","_j","_i","_h","_g","_f","storeSetting","useSetting","activates","form","$getSettingCompanyProfile","is_ghost","$getCompanies","$getActiveCompany","$getIsGhost","response","params","company_code","selectedIndex","findIndex","is_selected","storeUser","$loginToken"],"mappings":"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"}