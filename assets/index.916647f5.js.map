{"version":3,"file":"index.916647f5.js","sources":["../../src/composable/integration/directToMobile.js","../../src/components/Integration/Ups/Dtm/Form.vue","../../src/views/integration/ups-dtm/index.vue"],"sourcesContent":["import { computed } from 'vue'\nimport { useStore } from 'vuex'\nimport { required } from '@/validations/index'\nimport { isFunction } from 'utils/is'\n\nexport const useForm = () => {\n  const store = useStore()\n  const credentials = computed(\n    () => store.state.integration.directToMobile.credentials\n  )\n  const loading = computed(\n    () => store.state.integration.directToMobile.loading.credentials\n  )\n  const isEditedCredentials = computed(\n    () =>\n      btoa(\n        JSON.stringify(store.state.integration.directToMobile.credentials)\n      ) !==\n      btoa(\n        JSON.stringify(\n          store.state.integration.directToMobile.cached_credentials\n        )\n      )\n  )\n  const validationRules = {\n    domain: {\n      required\n    },\n    logon_name: {\n      required\n    },\n    password: {\n      required\n    }\n  }\n  const resetCredential = () =>\n    store.commit('integration/directToMobile/RESET_CREDENTIAL')\n  const setCredential = (credentials = null) => {\n    if (credentials === null) return\n    store.commit('integration/directToMobile/SET_CREDENTIAL', credentials)\n  }\n  const connectCredential = async (callback = () => {}) => {\n    try {\n      store.commit(\n        'integration/directToMobile/SET_LOADING_CREDENTIAL_CONNECT',\n        true\n      )\n      await store.dispatch('integration/directToMobile/connectCredential')\n      isFunction(callback) && callback(null)\n    } catch (err) {\n      isFunction(callback) && callback(err)\n    } finally {\n      store.commit(\n        'integration/directToMobile/SET_LOADING_CREDENTIAL_CONNECT',\n        false\n      )\n    }\n  }\n  const fetchCredential = async (callback = () => {}) => {\n    try {\n      await store.commit(\n        'integration/directToMobile/SET_LOADING_CREDENTIAL_FETCH',\n        true\n      )\n      await store.dispatch('integration/directToMobile/fetchCredential')\n      isFunction(callback) && callback(null)\n    } catch (err) {\n      isFunction(callback) && callback(err)\n    } finally {\n      await store.commit(\n        'integration/directToMobile/SET_LOADING_CREDENTIAL_FETCH',\n        false\n      )\n    }\n  }\n  return {\n    credentials,\n    validationRules,\n    loading,\n    isEditedCredentials,\n    setCredential,\n    resetCredential,\n    connectCredential,\n    fetchCredential\n  }\n}\n","<template>\n  <div class=\"grid grid-cols-1 gap-6\">\n    <div class=\"col-span-1\">\n      <Input\n        :modelValue=\"formData.domain\"\n        @update:modelValue=\"\n          (value) => {\n            formData.domain = value\n            handleUpdateForm()\n          }\n        \"\n        placeholder=\"Domain\"\n        label='Domain \"AKA Enterprise ID\"'\n        block\n        :view=\"validation.domain.$invalid ? 'danger' : 'default'\"\n      />\n      <small\n        class=\"text-red-base block\"\n        v-for=\"(error, errorIndex) of validation.domain.$errors\"\n        :key=\"errorIndex\"\n        >{{ error.$message }}.\n      </small>\n    </div>\n    <div class=\"col-span-1\">\n      <Input\n        :modelValue=\"formData.logon_name\"\n        @update:modelValue=\"\n          (value) => {\n            formData.logon_name = value\n            handleUpdateForm()\n          }\n        \"\n        placeholder=\"Logon Name\"\n        label=\"Logon Name\"\n        block\n        :view=\"validation.logon_name.$invalid ? 'danger' : 'default'\"\n      />\n      <small\n        class=\"text-red-base block\"\n        v-for=\"(error, errorIndex) of validation.logon_name.$errors\"\n        :key=\"errorIndex\"\n        >{{ error.$message }}.\n      </small>\n    </div>\n    <div class=\"col-span-1\">\n      <Input\n        :modelValue=\"formData.password\"\n        @update:modelValue=\"\n          (value) => {\n            formData.password = value\n            handleUpdateForm()\n          }\n        \"\n        :type=\"showPassword ? 'text' : 'password'\"\n        placeholder=\"API Key\"\n        label=\"API Key\"\n        block\n        :view=\"validation.password.$invalid ? 'danger' : 'default'\"\n        icon\n        right\n        autocomplete=\"new-password\"\n      >\n        <template #icon>\n          <span\n            class=\"material-icons block cursor-pointer text-grey-03\"\n            @click=\"showPassword = !showPassword\"\n            >{{ showPassword ? 'visibility_off' : 'visibility' }}</span\n          >\n        </template>\n        <template #default> Verify </template>\n      </Input>\n      <small\n        class=\"text-red-base block\"\n        v-for=\"(error, errorIndex) of validation.password.$errors\"\n        :key=\"errorIndex\"\n        >{{ error.$message }}.\n      </small>\n    </div>\n  </div>\n</template>\n<script>\nimport { defineComponent, ref, watch } from 'vue'\n\nimport { useForm } from 'composable/integration/directToMobile'\n\nimport { useVuelidate } from '@vuelidate/core'\n\nimport Input from 'bbUi/components/input/input.vue'\nimport Button from 'bbUi/components/button/button.vue'\n\nexport default defineComponent({\n  name: 'integrationKlayvioForm',\n  components: {\n    Input,\n    Button\n  },\n  props: {\n    data: {\n      type: Object,\n      default: () => ({\n        domain: null,\n        logon_name: null,\n        password: null\n      })\n    }\n  },\n  emits: ['update:data'],\n  setup(props, { emit }) {\n    const { validationRules } = useForm()\n    const formData = ref({\n      domain: props.data.domain,\n      logon_name: props.data.logon_name,\n      password: props.data.password\n    })\n    const showPassword = ref(false)\n    const validation = useVuelidate(validationRules, formData, {\n      $lazy: true\n    })\n    const validate = () => {\n      validation.value.$validate()\n      return !validation.value.$invalid\n    }\n    const handleUpdateForm = () => emit('update:data', formData.value)\n\n    watch(\n      () => props.data,\n      () => (formData.value = { ...props.data })\n    )\n\n    return {\n      formData,\n      showPassword,\n      validation,\n      validate,\n      handleUpdateForm\n    }\n  }\n})\n</script>\n","<template>\n  <Modal\n    size=\"xs\"\n    :modelValue=\"true\"\n    @click-close=\"handleCloseForm\"\n    without-transition\n  >\n    <template #header>\n      <div class=\"flex justify-between\">\n        <span>UPS Direct to Mobile</span>\n      </div>\n    </template>\n    <template #default>\n      <Alert class=\"my-4\" color=\"blue\" view=\"smooth\">\n        <template #default>\n          <div class=\"flex\">\n            <i class=\"material-icons mr-3\">info</i>\n            <span\n              >These credentials are provided to you by your UPS account\n              representative.</span\n            >\n          </div>\n        </template>\n      </Alert>\n      <div\n        v-if=\"isVerified\"\n        class=\"flex items-center py-2 px-4 bg-green-lighten text-green-04 w-max rounded-full my-3\"\n      >\n        <i class=\"material-icons mr-3\">check_circle</i>\n        <span>Verified</span>\n      </div>\n      <DirectToMobileForm\n        ref=\"refDirectToMobileForm\"\n        :data=\"credentials\"\n        @update:data=\"setCredential\"\n      />\n    </template>\n    <template #footer>\n      <div class=\"flex items-center justify-between\">\n        <div>\n          <button v-if=\"isVerified\" class=\"px-3 py-3\" @click=\"handleCloseForm\">\n            Close\n          </button>\n        </div>\n        <div>\n          <Button\n            color=\"teal\"\n            :loading=\"loading.connect || loading.fetch\"\n            @click=\"handleUpdateCredential\"\n            >Verify</Button\n          >\n        </div>\n      </div>\n    </template>\n  </Modal>\n</template>\n<script>\nimport { computed, defineComponent, ref } from 'vue'\nimport { useRouter } from 'vue-router'\n\nimport { useForm } from 'composable/integration/directToMobile'\nimport { useAll } from 'composable/integration'\n\nimport Button from 'bbUi/components/button/button.vue'\nimport Modal from 'bbUi/components/modal/modal.vue'\nimport Alert from 'bbUi/components/alert/alert.vue'\nimport Badge from 'bbUi/components/badge/badge.vue'\n\nimport DirectToMobileForm from 'components/Integration/Ups/Dtm/Form.vue'\nimport { ElMessage } from 'element-plus'\n\nexport default defineComponent({\n  name: 'integrationKlaviyo',\n  components: {\n    Button,\n    Modal,\n    Alert,\n    Badge,\n    DirectToMobileForm\n  },\n  async setup() {\n    const refDirectToMobileForm = ref(null)\n    const router = useRouter()\n    const {\n      credentials,\n      loading,\n      isEditedCredentials,\n      setCredential,\n      fetchCredential,\n      connectCredential\n    } = useForm()\n    const { actionAll } = useAll()\n\n    const isVerified = computed(\n      () =>\n        Object.entries(credentials.value).filter(([_, value]) => !value)\n          .length === 0 && !isEditedCredentials.value\n    )\n\n    const handleCloseForm = () => {\n      router.push({\n        name: 'integration',\n        query: {\n          reload: 1\n        }\n      })\n    }\n    const handleUpdateCredential = async () => {\n      if (!refDirectToMobileForm.value) return\n      const isValid = refDirectToMobileForm.value.validate()\n      if (!isValid) return\n      await connectCredential(async (err) => {\n        if (err) return\n        await Promise.allSettled([actionAll(), fetchCredential()])\n        ElMessage({\n          type: 'success',\n          message: 'Settings updated!'\n        })\n        router.push({\n          name: 'integration',\n          query: {\n            reload: 1\n          }\n        })\n      })\n    }\n\n    await fetchCredential()\n\n    return {\n      refDirectToMobileForm,\n      credentials,\n      loading,\n      isVerified,\n      setCredential,\n      handleCloseForm,\n      handleUpdateCredential\n    }\n  }\n})\n</script>\n<style lang=\"scss\" scoped></style>\n"],"names":["useForm","store","useStore","credentials","computed","state","integration","directToMobile","loading","isEditedCredentials","btoa","JSON","stringify","cached_credentials","validationRules","domain","required","logon_name","password","setCredential","credentials2","commit","resetCredential","connectCredential","async","callback","dispatch","isFunction","err","fetchCredential","_sfc_main","defineComponent","name","components","Input","Button","props","data","type","Object","default","emits","[object Object]","emit","formData","ref","showPassword","validation","useVuelidate","$lazy","watch","value","__spreadValues","validate","$validate","$invalid","handleUpdateForm","_hoisted_1","class","_hoisted_2","_hoisted_3","Modal","Alert","Badge","DirectToMobileForm","_openBlock","_createElementBlock","_component_Input","modelValue","_ctx","_cache","placeholder","label","block","_Fragment","_renderList","$errors","error","errorIndex","_hoisted_4","view","icon","right","_withCtx","_createElementVNode","$event","refDirectToMobileForm","router","useRouter","actionAll","useAll","isVerified","entries","filter","_","length","handleCloseForm","push","query","reload","handleUpdateCredential","Promise","allSettled","_u","message","key","_createBlock","_component_Modal","size","onClickClose","_createVNode","_component_Alert","color","_createCommentVNode","_component_DirectToMobileForm","footer","args","_component_Button","connect","fetch"],"mappings":"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"}