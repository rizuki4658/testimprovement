{"version":3,"file":"notes.6c148e05.js","sources":["../../src/store/pinia/buyback/notes.js"],"sourcesContent":["import { defineStore } from 'pinia'\nimport request from 'utils/request'\nimport store from 'store'\n\nexport const useBuybackNotes = defineStore('buybackNotes', {\n  state: () => ({\n    routeParams: null,\n    getNotes: {\n      isLoading: false,\n      internal: [],\n      customer: []\n    },\n    formNotes: {\n      mode: 'add',\n      note: null,\n      id: null,\n      type: 'internal',\n      tabs: [\n        {\n          name: 'Internal Note',\n          component: 'internal',\n          disabled: false\n        },\n        {\n          name: 'Customer Note',\n          component: 'customer',\n          disabled: false\n        }\n      ]\n    },\n    addNotes: {\n      modal: false,\n      isLoading: false\n    },\n    editNotes: {\n      item: undefined,\n      modal: false,\n      isLoading: false\n    },\n    deleteNotes: {\n      item: undefined,\n      modal: false,\n      isLoading: false\n    },\n    warningNotes: {\n      ids: [],\n      page: 1,\n      lastPage: 1,\n      isReviewed: false,\n      isLoading: false,\n      modal: false,\n      notes: []\n    }\n  }),\n  getters: {},\n  actions: {\n    async $setRoute(payload = {}) {\n      this.routeParams = payload\n    },\n    async $getNotes(payload = {}) {\n      this.getNotes.isLoading = true\n\n      try {\n        const response = await request({\n          url: `/v1/pos/order-notes/${this.routeParams?.buybackId}`,\n          params: payload,\n          method: 'get'\n        })\n        this.setNotesCustomer(response.customer, store.state?.user?.me?.id)\n        this.setNotesInternal(response.internal, store.state?.user?.me?.id)\n      } finally {\n        this.getNotes.isLoading = false\n      }\n    },\n    async $getNotesUnread() {\n      this.warningNotes.isLoading = true\n      this.warningNotes.isReviewed = false\n      try {\n        const response = await request({\n          url: `/v1/pos/order-notes/unread`,\n          params: {\n            admin_id: store.state.user.me.id,\n            order_ids: this.warningNotes.ids,\n            page: this.warningNotes.page\n          },\n          method: 'get'\n        })\n    \n        const currentAdminId = store.state.user.me.id\n        const newNotes = Array.isArray(response.data)\n          ? response.data.map(item => ({\n              ...item,\n              order_notes: item.order_notes.filter(note => note.admin_id !== currentAdminId)\n            }))\n          : []\n    \n        this.warningNotes.lastPage = response.last_page\n        this.warningNotes.page = response.current_page\n    \n        if (this.warningNotes.page === 1) {\n          // First page: replace notes\n          this.warningNotes.notes = newNotes\n        } else {\n          // Subsequent pages: merge with existing notes by box_id\n          const existingNotes = [...this.warningNotes.notes]\n    \n          newNotes.forEach(newItem => {\n            const existingIndex = existingNotes.findIndex(e => e.box_id === newItem.box_id)\n            if (existingIndex !== -1) {\n              // Merge order_notes while avoiding duplicates (optional enhancement)\n              const existingOrderNotes = existingNotes[existingIndex].order_notes\n              const combinedNotes = [\n                ...existingOrderNotes,\n                ...newItem.order_notes.filter(\n                  newNote => !existingOrderNotes.some(\n                    existingNote => existingNote.id === newNote.id\n                  )\n                )\n              ]\n              existingNotes[existingIndex].order_notes = combinedNotes\n            } else {\n              // Push new\n              existingNotes.push(newItem)\n            }\n          })\n    \n          this.warningNotes.notes = existingNotes\n        }\n      } catch (error) {\n        console.error('Failed to fetch unread notes:', error)\n      } finally {\n        this.warningNotes.isLoading = false\n      }\n    },\n    async $updateNotesUnread() {\n      this.warningNotes.isLoading = true\n      try {\n        await request({\n          url: `/v1/pos/order-notes/read-status`,\n          data: {\n            admin_id: store.state.user.me.id,\n            order_ids: this.warningNotes.ids\n          },\n          method: 'post'\n        })\n        return true\n      } catch (error) {\n        console.error('Failed to update unread notes:', error)\n        return false\n      } finally {\n        this.warningNotes.isLoading = false\n      }\n    },\n    async $addNotes() {\n      this.addNotes.isLoading = true\n      try {\n        await request({\n          url: '/v1/pos/order-notes',\n          data: {\n            admin_id: store.state.user.me.id,\n            box_id: this.routeParams?.buybackId,\n            note: this.formNotes.note,\n            type: this.formNotes.type\n          },\n          method: 'post'\n        })\n        await this.$getNotes()\n      } finally {\n        this.addNotes.isLoading = false\n      }\n    },\n    async $editNotes() {\n      this.editNotes.isLoading = true\n      try {\n        await request({\n          url: `/v1/pos/order-notes/update/${this.formNotes.id}`,\n          data: {\n            admin_id: store.state.user.me.id,\n            note: this.formNotes.note,\n            _method: 'PUT'\n          },\n          method: 'post'\n        })\n        await this.$getNotes()\n      } finally {\n        this.editNotes.isLoading = false\n      }\n    },\n    async $deleteNotes() {\n      this.deleteNotes.isLoading = true\n      try {\n        await request({\n          url: `/v1/pos/order-notes/delete/${this.formNotes.id}`,\n          data: {\n            _method: 'DELETE'\n          },\n          method: 'post'\n        })\n        await this.$getNotes()\n      } finally {\n        this.deleteNotes.isLoading = false\n      }\n    },\n    setNotesCustomer(data, adminId) {\n      this.getNotes.customer = data?.map(i => ({\n        ...i,\n        type: 'customer',\n        is_granted: adminId === i.admin_id\n      })) ?? []\n    },\n    setNotesInternal(data, adminId) {\n      this.getNotes.internal = data?.map(i => ({\n        ...i,\n        type: 'internal',\n        is_granted: adminId === i.admin_id\n      })) ?? []\n    },\n    resetGetNotes() {\n      this.getNotes.internal = []\n      this.getNotes.customer = []\n    },\n    resetForm() {\n      this.formNotes.mode = 'add'\n      this.formNotes.note = null\n      this.formNotes.id = null\n      this.formNotes.type = 'internal'\n      this.formNotes.tabs = this.formNotes.tabs.map(i => ({ ...i, disabled: false }))\n    }\n  }\n})\n"],"names":["useBuybackNotes","defineStore","state","routeParams","getNotes","isLoading","internal","customer","formNotes","mode","note","id","type","tabs","name","component","disabled","addNotes","modal","editNotes","item","deleteNotes","warningNotes","ids","page","lastPage","isReviewed","notes","getters","actions","[object Object]","payload","this","response","request","url","_a","buybackId","params","method","setNotesCustomer","_d","_c","_b","store","user","me","setNotesInternal","_g","_f","_e","admin_id","order_ids","currentAdminId","newNotes","Array","isArray","data","map","__spreadProps","__spreadValues","order_notes","filter","last_page","current_page","existingNotes","forEach","newItem","existingIndex","findIndex","e","box_id","existingOrderNotes","combinedNotes","newNote","some","existingNote","push","error","console","$getNotes","_method","adminId","i","is_granted"],"mappings":"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"}