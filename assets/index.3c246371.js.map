{"version":3,"file":"index.3c246371.js","sources":["../../src/composable/integration/klaviyo.js","../../src/components/Integration/Klaviyo/Form.vue","../../src/views/integration/klaviyo/index.vue"],"sourcesContent":["import { reactive, computed } from 'vue'\nimport { useStore } from 'vuex'\nimport { required } from '@/validations/index'\nimport { isFunction } from 'utils/is'\nimport { deepClone } from 'utils/deep-clone'\n\nexport const useForm = () => {\n  const store = useStore()\n  const state = reactive({\n    klaviyo_private_api_key: '',\n    klaviyo_sms_disclosure: '0',\n    // key: '',\n    // name: '',\n    // sort_code: [],\n    // subject: '',\n    // textinfo: ''\n  })\n  const loading = computed(() => store.state.integration.klaviyo.loading.credentials)\n  const validationRules = computed(() => {\n    const rules = {\n      klaviyo_private_api_key: { required },\n      klaviyo_sms_disclosure: {}\n    }\n\n    // if (state.klaviyo_sms_disclosure == 1) {\n    //   rules.subject = { required }\n    //   rules.textinfo = { required }\n    // }\n \n    return rules\n  })\n  const resetCredential = async (keyItem = undefined, value = undefined) => {\n    // state[keyItem] = store.state.integration.klaviyo.credentials[keyItem] || value || null\n    // try {\n    //   await store.commit(\n    //     'integration/klaviyo/SET_LOADING_MESSAGE_FETCH',\n    //     true\n    //   )\n    //   await store.dispatch('integration/klaviyo/resetMessage').then((res) => {\n    //     Object.keys(state).forEach(key => {\n    //       if (res[key]) state[key] = res[key]\n    //     })\n    //   })\n    //   isFunction(callback) && callback(null)\n    // } catch (err) {\n    //   isFunction(callback) && callback(err)\n    // } finally {\n    //   await store.commit(\n    //     'integration/klaviyo/SET_LOADING_MESSAGE_FETCH',\n    //     false\n    //   )\n    // }\n  }\n  // const setCredential = (credentials = null) => {\n  //   if (credentials === null) return\n  //   store.commit('integration/klaviyo/SET_CREDENTIAL', credentials)\n  // }\n  const connectCredential = async (callback = () => {}) => {\n    try {\n      store.commit('integration/klaviyo/SET_LOADING_CREDENTIAL_CONNECT', true)\n      await store.dispatch('integration/klaviyo/connectCredential', {\n        klaviyo_private_api_key: state.klaviyo_private_api_key\n      })\n      isFunction(callback) && callback(null)\n    } catch (err) {\n      isFunction(callback) && callback(err)\n    } finally {\n      store.commit('integration/klaviyo/SET_LOADING_CREDENTIAL_CONNECT', false)\n    }\n  }\n  const fetchCredential = async (callback = () => {}) => {\n    try {\n      await store.commit(\n        'integration/klaviyo/SET_LOADING_CREDENTIAL_FETCH',\n        true\n      )\n      await store.dispatch('integration/klaviyo/fetchCredential').then(res => {\n        Object.keys(state).forEach(key => {\n          if (res[key]) state[key] = res[key]\n        })\n      })\n      isFunction(callback) && callback(null)\n    } catch (err) {\n      isFunction(callback) && callback(err)\n    } finally {\n      await store.commit(\n        'integration/klaviyo/SET_LOADING_CREDENTIAL_FETCH',\n        false\n      )\n    }\n  }\n  const fetchMesssage = async (callback = () => {}) => {\n    // try {\n    //   await store.commit(\n    //     'integration/klaviyo/SET_LOADING_MESSAGE_FETCH',\n    //     true\n    //   )\n    //   await store.dispatch('integration/klaviyo/fetchMesssage').then(res => {\n    //     Object.keys(state).forEach(key => {\n    //       if (res[key]) state[key] = res[key]\n    //     })\n    //   })\n    //   isFunction(callback) && callback(null)\n    // } catch (err) {\n    //   isFunction(callback) && callback(err)\n    // } finally {\n    //   await store.commit(\n    //     'integration/klaviyo/SET_LOADING_MESSAGE_FETCH',\n    //     false\n    //   )\n    // }\n  }\n  const updateCredential = async (callback = () => {}) => {\n    try {\n      await store.commit(\n        'integration/klaviyo/SET_LOADING_CREDENTIAL_UPDATE',\n        true\n      )\n      await store.dispatch('integration/klaviyo/updateCredential', {\n        klaviyo_private_api_key: state.klaviyo_private_api_key,\n        klaviyo_sms_disclosure: state.klaviyo_sms_disclosure\n      })\n      isFunction(callback) && callback(null)\n    } catch (err) {\n      isFunction(callback) && callback(err)\n    } finally {\n      await store.commit(\n        'integration/klaviyo/SET_LOADING_CREDENTIAL_UPDATE',\n        false\n      )\n    }\n  }\n  const updateMessage = async (callback = () => {}) => {\n    // try {\n    //   await store.commit(\n    //     'integration/klaviyo/SET_LOADING_MESSAGE_FETCH',\n    //     true\n    //   )\n    //   await store.dispatch('integration/klaviyo/updateMessage', {\n    //     key: state.key,\n    //     name: state.name,\n    //     sort_code: state.sort_code,\n    //     subject: state.subject,\n    //     textinfo: state.textinfo,\n    //   })\n    //   isFunction(callback) && callback(null)\n    // } catch (err) {\n    //   isFunction(callback) && callback(err)\n    // } finally {\n    //   await store.commit(\n    //     'integration/klaviyo/SET_LOADING_MESSAGE_FETCH',\n    //     false\n    //   )\n    // }\n  }\n  return {\n    state,\n    validationRules,\n    loading,\n    resetCredential,\n    connectCredential,\n    fetchCredential,\n    fetchMesssage,\n    updateMessage,\n    updateCredential\n  }\n}\n","<template>\n  <div class=\"grid grid-cols-1 mb-8\">\n    <div class=\"col-span-1\">\n      <Input\n        v-model=\"formData.klaviyo_private_api_key\"\n        placeholder=\"Private API key\"\n        label=\"Private API Key\"\n        block\n        :view=\"\n          validation.klaviyo_private_api_key.$invalid ? 'danger' : 'default'\n        \"\n      />\n      <small\n        class=\"text-red-base block\"\n        v-for=\"(error, errorIndex) of validation.klaviyo_private_api_key\n          .$errors\"\n        :key=\"errorIndex\"\n        >{{ error.$message }}.\n      </small>\n    </div>\n  </div>\n  <div class=\"border border-grey-02 border-opacity-50 rounded-lg p-4 space-y-4\">\n    <Checkbox\n      v-model=\"formData.klaviyo_sms_disclosure\"\n      :loading=\"loading.update\"\n      type=\"toggle\"\n      value=\"1\"\n      value-off=\"0\"\n      class=\"font-semibold\">\n      SMS Disclosure\n    </Checkbox>\n    <p class=\"text-sm\">\n      Enabling this feature allows users to receive update offers via SMS at their convenience. You can activate this option if you are utilizing SMS marketing from Klaviyo.\n    </p>\n    <!--\n      <img\n        title=\"Widget Example\"\n        alt=\"klaviyo_widget_sample\"\n        src=\"@/assets/klaviyo_widget_sample.png\"\n      />\n      <transition name=\"slide-fade\">\n        <div v-if=\"formData.klaviyo_sms_disclosure == 1\" class=\"space-y-4\">\n          <div v-loading=\"loading.message\">\n            <Input\n              v-model=\"formData.subject\"\n              label=\"Title\"\n              block  \n              :view=\"validation.subject.$invalid ? 'danger' : 'default'\"\n            />\n            <small\n              class=\"text-red-base block\"\n              v-for=\"(error, errorIndex) of validation.subject.$errors\"\n              :key=\"errorIndex\"\n              >{{ error.$message }}.\n            </small>\n          </div>\n          <div v-loading=\"loading.message\">\n            <Input\n              v-model=\"formData.textinfo\"\n              label=\"Description\"\n              type=\"textarea\"\n              block\n              rows=\"6\"\n              :view=\"validation.textinfo.$invalid ? 'danger' : 'default'\"\n            />\n            <small\n              class=\"text-red-base block\"\n              v-for=\"(error, errorIndex) of validation.textinfo.$errors\"\n              :key=\"errorIndex\"\n              >{{ error.$message }}.\n            </small>\n          </div>\n          <Button\n            :loading=\"loading.message\"\n            color=\"teal\"\n            dense\n            @click=\"handleReset\">\n            <div class=\"flex items-center justify-center gap-x-2\">\n              <span class=\"material-icons icon-sm text-grey-02\">refresh</span>\n              Reset to Default\n            </div>\n          </Button>\n        </div>\n      </transition>\n    -->\n  </div>\n</template>\n<script>\nimport { computed, defineComponent } from 'vue'\n\nimport Input from 'bbUi/components/input/input.vue'\nimport Button from 'bbUi/components/button/button.vue'\nimport Checkbox from 'bbUi/components/checkbox/checkbox.vue'\n\nexport default defineComponent({\n  name: 'integrationKlayvioForm',\n  components: {\n    Input,\n    Button,\n    Checkbox\n  },\n  props: {\n    modelValue: {\n      type: Object,\n      default: () => ({\n        klaviyo_private_api_key: null\n      })\n    },\n    validation: {\n      type: Object,\n      default: () => ({})\n    },\n    loading: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  emits: ['update:modelValue', 'update:resetValue'],\n  setup(props, { emit }) {\n    const formData = computed({\n      get: () => props.modelValue,\n      set: (value) => emit('update:modelValue', value)\n    })\n\n    const handleReset = () => emit('update:resetValue')\n\n    return {\n      formData,\n      handleReset\n    }\n  }\n})\n</script>\n","<template>\n  <Modal\n    size=\"sm\"\n    :modelValue=\"true\"\n    @click-close=\"handleCloseForm\"\n    without-transition\n  >\n    <template #header>\n      <div class=\"flex justify-between\">\n        <span>Klaviyo Config</span>\n      </div>\n    </template>\n    <template #default>\n      <KlaviyoForm\n        v-model=\"state\"\n        :loading=\"loading\"\n        :validation=\"validation\"\n        @update:resetValue=\"handleReset\"\n      />\n    </template>\n    <template #footer>\n      <div class=\"w-max ml-auto\">\n        <Button\n          color=\"teal\"\n          :loading=\"loading.connect || loading.update\"\n          @click=\"handleUpdateCredential\"\n          >Save Changes</Button\n        >\n      </div>\n    </template>\n  </Modal>\n</template>\n<script>\nimport { defineComponent } from 'vue'\nimport { useRouter, useRoute } from 'vue-router'\nimport { useVuelidate } from '@vuelidate/core'\n\nimport { useForm } from 'composable/integration/klaviyo'\n\nimport Button from 'bbUi/components/button/button.vue'\nimport Modal from 'bbUi/components/modal/modal.vue'\n\nimport KlaviyoForm from 'components/Integration/Klaviyo/Form.vue'\n\nexport default defineComponent({\n  name: 'integrationKlaviyo',\n  components: {\n    Button,\n    Modal,\n    KlaviyoForm\n  },\n  async setup() {\n    const router = useRouter()\n    const route = useRoute()\n    const {\n      state,\n      loading,\n      validationRules,\n      resetCredential,\n      fetchMesssage,\n      fetchCredential,\n      updateMessage,\n      updateCredential,\n      connectCredential\n    } = useForm()\n    const validation = useVuelidate(validationRules, state, {\n      $lazy: true\n    })\n\n    const validate = () => {\n      validation.value.$validate()\n      return !validation.value.$invalid\n    }\n    const handleReset = async (e) => {\n      // Object.keys(e).forEach((key) => {\n      //   validation.value[key].$reset()\n      // await resetCredential()\n      // })\n    }\n    const handleCloseForm = () => {\n      router.push({\n        name: 'integration',\n        query: {\n          reload: 1\n        }\n      })\n    }\n    const handleUpdateCredential = async () => {\n      const isValid = validate()\n      if (!isValid) return\n      await connectCredential(async (err) => {\n        if (err) return\n        // await updateMessage(async (err) => {\n        //   if (err) return\n        await updateCredential((err) => {\n          if (err) return\n          router.push({\n            name: 'integration',\n            query: {\n              enable: route.query?.id || ''\n            }\n          })\n        })\n        // })\n      })\n    }\n\n    await fetchCredential()\n    // await fetchMesssage()\n\n    return {\n      state,\n      loading,\n      validation,\n      handleReset,\n      handleCloseForm,\n      handleUpdateCredential\n    }\n  }\n})\n</script>\n<style lang=\"scss\" scoped></style>\n"],"names":["_sfc_main","defineComponent","name","components","Input","Button","Checkbox","props","modelValue","type","Object","default","klaviyo_private_api_key","validation","loading","emits","setup","emit","formData","computed","get","set","value","handleReset","_hoisted_1","class","_hoisted_2","Modal","KlaviyoForm","_openBlock","_createElementBlock","_Fragment","_createElementVNode","_createVNode","_component_Input","_ctx","onUpdate:modelValue","_cache","$event","placeholder","label","block","view","openBlock","_renderList","_hoisted_3","_component_Checkbox","klaviyo_sms_disclosure","update","value-off","[object Object]","router","useRouter","route","useRoute","state","validationRules","resetCredential","fetchMesssage","fetchCredential","updateMessage","updateCredential","connectCredential","store","useStore","reactive","integration","klaviyo","credentials","required","async","keyItem","callback","commit","dispatch","isFunction","err","then","res","keys","forEach","key","useForm","useVuelidate","$lazy","e","handleCloseForm","push","query","reload","handleUpdateCredential","$validate","$invalid","err2","enable","_a","id","_createBlock","_component_Modal","size","onClickClose","_withCtx","footer","_component_Button","color","connect"],"mappings":"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"}