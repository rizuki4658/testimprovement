{"version":3,"file":"index.54844a74.js","sources":["../../src/validations/index.js"],"sourcesContent":["\nimport * as validators from '@vuelidate/validators'\n\nconst capitalizeFirstLetter = (string) => {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nconst customMessage = (validator, name = '', param = {}) => validators.helpers.withMessage((prototype) => {\n    if (prototype.$validator === 'email') {\n        return `${prototype.$property ? capitalizeFirstLetter(prototype.$property) : 'This field'} is not a valid email address`\n    }\n    if (prototype.$validator === 'numeric'){\n        return `${prototype.$property ? capitalizeFirstLetter(prototype.$property) : 'This field'} must be a number`\n    }\n    if (prototype.$validator === 'minLength') {\n        return `This field has a value of '${prototype.$model}' must have a min length of ${prototype.$params.min}`\n    }\n    if (prototype.$validator === 'maxLength') {\n        return `This field has a value of '${prototype.$model}' must have a max length of ${prototype.$params.max}`\n    }\n    if (name === 'validAddress') {\n        return 'Please select a valid location from autocomplete list'\n    }\n    if (name === 'fileSize') {\n        return `File size must be less than ${param.maxKB}`\n    }\n    if (name === 'fileType') {\n        return `File type must be ${param.type}`\n    }\n    if (name === 'textOnly') {\n        return `${prototype.$property ? capitalizeFirstLetter(prototype.$property.replace(/_/g, ' ')) : 'This field'} must contain letters only`\n    }\n    if (name === 'numberOnly') {\n        return `${prototype.$property ? capitalizeFirstLetter(prototype.$property.replace(/_/g, ' ')) : 'This field'} must contain numbers only`\n    }\n    if (name === 'alphaNumeric') {\n        return `${prototype.$property ? capitalizeFirstLetter(prototype.$property.replace(/_/g, ' ')) : 'This field'} must be alphanumeric (letters and numbers only)`\n    }\n    // Untuk validator message\n    // Field name ngambil dari attribute name di html jadi pastikan harus diisi\n    // Jika tidak ada hanya akan memunculkan kata \"This field\"\n    return `${prototype.$property ? capitalizeFirstLetter(prototype.$property.replace(/_/g, ' ')) : 'This field'} is required`\n}, validator)\n\nexport const required = customMessage(validators.required)\nexport const email = customMessage(validators.email)\nexport const numeric = customMessage(validators.numeric)\nexport const validAddress = customMessage(validators.sameAs(true), 'validAddress')\nexport const minLength = (length) => {\n    return customMessage(validators.minLength(length))\n}\nexport const maxLength = (length) => validators.maxLength(length)\nexport const maxLengthCustom = (length) => customMessage(validators.helpers.withParams({ type: 'maxLengthCustom', max: length }, (value) => {\n  if (value === null || value === undefined || value === '') return true\n\n  return validators.maxLength(length).$validator(value)\n}), 'maxLength')\nexport const url = validators.url\nexport const fileSize = (maxKB = 500) =>\n  customMessage((value) => {\n    if (!value || !value.size) return true\n    const sizeInKB = value.size / 1024\n    return sizeInKB <= maxKB\n  }, 'fileSize', { maxKB })\n\nexport const fileType = (expectedType = 'image/svg+xml') =>\n  customMessage((value) => {\n    if (!value || !value.type) return true\n    return value.type === expectedType\n  }, 'fileType', { type: expectedType })\n\nexport const textOnly = customMessage(\n  validators.helpers.withParams({ name: 'textOnly' }, (value) => {\n    if (value === null || value === undefined || value === '') return true\n\n    // const result = /^[A-Za-z\\s]+$/.test(value)\n    // return result\n    const result = /^[\\p{L}\\s.'’-]+$/u.test(value)\n    return result\n  }),\n  'textOnly'\n)\n\nexport const numberOnly = customMessage(\n  validators.helpers.withParams({ name: 'numberOnly' }, (value) => {\n    if (value === null || value === undefined || value === '') return true\n\n    return validators.numeric.$validator(value)\n  }),\n  'numberOnly'\n)\n\nexport const alphaNumeric = customMessage(\n  validators.helpers.withParams({ name: 'alphaNumeric' }, (value) => {\n    // For passed the number only or text only\n    // if (typeof value !== 'string') return false\n    // const cleaned = value.trim()\n    // return /^[A-Za-z0-9]+$/.test(cleaned)\n\n    if (value === null || value === undefined || value === '') return true\n\n    if (typeof value !== 'string') return false\n    const cleaned = value.trim()\n    // one letter minimal and one number minimal, no space\n    // return /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]+$/.test(cleaned)\n    const result = /^(?=.*\\p{L})(?=.*\\d)[\\p{L}\\d.'’-]+$/u.test(cleaned)\n    return result\n  }),\n  'alphaNumeric'\n)\n\nconst validationTypeMap = {\n  'Text Only': textOnly,\n  'Number Only': numberOnly,\n  'Alphanumeric': alphaNumeric\n}\n\nexport function buildBankValidationRules(attributes = []) {\n  const fieldRules = {}\n\n  for (let attribute of attributes) {\n    const name = attribute.attribute_name\n    fieldRules[name] = {}\n\n    if (attribute.is_required === true) {\n      fieldRules[name].required = required\n    }\n\n    if (attribute.max_length) {\n      fieldRules[name].maxLength = maxLengthCustom(attribute.max_length)\n    }\n\n    if (attribute.validation_type) {\n      const validator = validationTypeMap[attribute.validation_type]\n      const key = attribute.validation_type.replace(/\\s/g, '')\n      if (validator) {\n        fieldRules[name][key] = validator\n      }\n    }\n  }\n\n  return fieldRules\n}\n"],"names":["capitalizeFirstLetter","string","charAt","toUpperCase","slice","customMessage","validator","name","param","validators.helpers","withMessage","prototype","$validator","$property","$model","$params","min","max","maxKB","type","replace","required","validators.required","email","validators.email","validators.numeric","validAddress","validators.sameAs","minLength","length","validators.minLength","maxLength","validators.maxLength","maxLengthCustom","withParams","value","url","validators.url","fileSize","size","fileType","expectedType","validationTypeMap","Text Only","test","Number Only","Alphanumeric","cleaned","trim","buildBankValidationRules","attributes","fieldRules","attribute","attribute_name","is_required","max_length","validation_type","key"],"mappings":"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"}