{"version":3,"file":"select.399034f1.js","sources":["../../system-design/src/components/select/select.vue"],"sourcesContent":["<!--<script>-->\n<!--import { defineComponent, h, ref } from 'vue'-->\n<!--import { mixinBlock, mixinType, mixinDisabled } from '../../mixins'-->\n<!--import { addMixinPrefix } from '../../util/helpers'-->\n\n<!--export default defineComponent({-->\n<!--  name: 'Select',-->\n<!--  mixins: [-->\n<!--    ...addMixinPrefix([-->\n<!--      mixinBlock,-->\n<!--      mixinType,-->\n<!--      mixinDisabled-->\n<!--    ], 'select')-->\n<!--  ],-->\n<!--  props: {-->\n<!--    required: {-->\n<!--      type: Boolean,-->\n<!--      default: false-->\n<!--    },-->\n<!--    name: {-->\n<!--      type: String,-->\n<!--      default: ''-->\n<!--    },-->\n<!--    options: {-->\n<!--      type: Array,-->\n<!--      validator(prop){-->\n<!--        const requiredProps = ['label', 'value']-->\n<!--        for( let value of prop ){-->\n<!--          if ( Object.keys(value).includes(requiredProps) ) return false-->\n<!--        }-->\n<!--        return true-->\n<!--      }-->\n<!--    },-->\n<!--    modelValue: {-->\n<!--      type: String,-->\n<!--    }-->\n<!--  },-->\n<!--  emits: ['update:modelValue'],-->\n<!--  setup(props, { slots, emit }) {-->\n<!--    const uid = Math.floor(Math.random() * 1000000)-->\n<!--    const types = ref(['success', 'warning', 'danger', 'info'])-->\n<!--    let selectedValue = props.options.filter(option => option ?. selected)-->\n<!--    // Update default model value-->\n<!--    if( selectedValue.length === 1 ) emit('update:modelValue', selectedValue[0].value)-->\n\n<!--    const genOptions = () => {-->\n<!--      if( !props.options ) return []-->\n<!--      let selectOptions = []-->\n<!--      for( let option of props.options ){-->\n<!--        selectOptions.push( h('option', { class: 'select__option', value: option.value, selected: option ?. selected }, option.label ))-->\n<!--      }-->\n<!--      return selectOptions-->\n<!--    }-->\n\n<!--    const onValueChange = $event => {-->\n<!--      emit('update:modelValue', $event.target.value)-->\n<!--    }-->\n<!--    -->\n<!--    return {-->\n<!--      uid,-->\n<!--      genOptions,-->\n<!--      onValueChange,-->\n<!--      types-->\n<!--    }-->\n<!--  },-->\n<!--  render() {-->\n<!--    const listClass = [-->\n<!--      'select-wrapper',-->\n<!--      this.classBlock,-->\n<!--      this.classType,-->\n<!--      this.classDisabled-->\n<!--    ]-->\n\n<!--    return h('div', {-->\n<!--      class: listClass-->\n<!--    }, h('select', {class: 'select', required: this.required, name: this.name, onInput: this.onValueChange, disabled: this.disabled}, this.genOptions()))-->\n<!--  }-->\n<!--})-->\n<!--</script>-->\n\n<template>\n  <div class=\"select__container\" :class=\"[classView]\">\n    <label v-if=\"label\" class=\"select__label\">{{ label }}</label>\n    <div class=\"select-wrapper\" :class=\"[classDense, classBlock, classDisabled]\">\n      <Loading v-if=\"loading\" />\n      <select v-model=\"selected\" class=\"select\" :id=\"id\" :disabled=\"isDisabled\" :required=\"required\" @change=\"onChange\">\n\t\t\t\t<slot name=\"default-option\" :placeholder=\"placeholder\" :modelValue=\"modelValue\">\n\t\t\t\t\t<option class=\"select__option\" :selected=\"modelValue === '' || modelValue === null\" disabled value=\"\">{{ placeholder }}</option>\n\t\t\t\t</slot>\n        <template v-for=\"(item, index) in items\">\n          <slot :item=\"item\" :self=\"{ name: name == null ? item : item[name], modelValue: by == null ? item : item[by] }\" name=\"option\">\n            <option class=\"select__option\" v-html=\"name == null ? item : item[name]\" :value=\"by == null ? item : item[by]\" :key=\"index\"/>\n          </slot>\n        </template>\n      </select>\n    </div>\n  </div>\n</template>\n\n\n<script>\n// TODO: Need to change it to render so it can works properly when build\nimport { defineComponent, ref, watch, computed, h, resolveDirective, withDirectives } from 'vue'\nimport { mixinDense, mixinView, mixinBlock, mixinDisabled } from '../../mixins'\nimport Loading from '../loading/loading.vue'\nimport { addMixinPrefix } from '../../util/helpers'\n\nexport default defineComponent({\n  components: {\n    Loading\n  },\n  mixins: [\n    ...addMixinPrefix([\n      mixinDense,\n      mixinView('default'),\n      mixinBlock,\n      mixinDisabled\n    ], 'select')\n  ],\n  props: {\n    modelValue: {\n      type: [\n        String,\n        Number,\n        Object,\n        Boolean\n      ],\n      default: ''\n    },\n    name: {\n      type: String,\n      default: null\n    },\n    by: {\n      type: String,\n      default: null\n    },\n    placeholder: {\n      type: String,\n      default: '-Empty-'\n    },\n    id: String,\n    items: [\n      Array,\n      Number\n    ],\n    width: String,\n    plain: {\n      type: Boolean,\n      default: false\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    required: {\n      type: Boolean,\n      default: false\n    },\n    defaultValue: {\n      type: Boolean,\n      default: true\n    },\n    loading: {\n      type: Boolean,\n      default: false\n    },\n    label: {\n      type: String,\n      default: null\n    }\n  },\n  emits: [\n    'update:modelValue',\n    'change',\n    'input'\n  ],\n  setup(props, { emit, slots }) {\n    const selected = ref(null)\n    const views = ref(['default', 'success', 'warning', 'danger'])\n    selected.value = props.modelValue\n\n    const onChange = (e) => {\n      emit('update:modelValue', selected.value)\n      emit('change', selected.value)\n      emit('input', props.items[e.target.options.selectedIndex - 1])\n    }\n    const isDisabled = computed(() => {\n      return props.disabled || props.loading\n    })\n    watch(() => props.modelValue, newValue => {\n      selected.value = newValue\n    })\n\n    return {\n      selected,\n      isDisabled,\n      onChange,\n      views\n    }\n    // const genOptions = () => {\n    //   const items = []\n    //   items.push(h('option', {\n    //     class: 'select__option',\n    //     selected: props.modelValue === '' || props.modelValue === null,\n    //     disabled: true\n    //   }, {\n    //     default: () => props.placeholder\n    //   }))\n    //\n    //   let arr = props.items\n    //   if(typeof props.items === 'number') arr = new Array(props.items).fill(0)\n    //   props.items.forEach((item, index) => {\n    //     const option = slots.option && slots.option({\n    //       item,\n    //       self: {\n    //         name: props.name == null ? item : item[props.name],\n    //         modelValue: props.by == null ? item : item[props.by]\n    //       }\n    //     }) || h('option', {\n    //       class: 'select__option',\n    //       value: props.by == null ? item : item[props.by]\n    //     }, {\n    //       default: () => props.name == null ? item : item[props.name]\n    //     })\n    //\n    //     items.push(option)\n    //   })\n    //\n    //   return items\n    // }\n    // const genSelect = () => {\n    //   return h('select', {\n    //     class: 'select',\n    //     id: props.id,\n    //     disabled: isDisabled.value,\n    //     required: props.required,\n    //     value: selected.value,\n    //     onInput: e => {\n    //       selected.value = e.target.value\n    //     },\n    //     onChange: onChange\n    //   }, genOptions())\n    // }\n    //\n    //\n    // return {\n    //   genSelect\n    // }\n  },\n  // render() {\n  //   const children = [\n  //     this.$props.loading && h(Loading),\n  //     this.genSelect()\n  //   ]\n  //\n  //   return h('div', {\n  //     class: 'select-wrapper'\n  //   }, children)\n  // }\n})\n</script>\n"],"names":["_sfc_main","defineComponent","components","Loading","mixins","addMixinPrefix","mixinDense","mixinView","mixinBlock","mixinDisabled","props","modelValue","type","String","Number","Object","Boolean","default","name","by","placeholder","id","items","Array","width","plain","disabled","required","defaultValue","loading","label","emits","[object Object]","emit","slots","selected","ref","views","value","isDisabled","computed","watch","newValue","onChange","e","target","options","selectedIndex","key","_openBlock","_createElementBlock","_createCommentVNode","_createElementVNode","onUpdate:modelValue","_cache","$event","_ctx","class","_renderSlot","$slots","_Fragment","_renderList","item","index","innerHTML"],"mappings":"iPA2GA,MAAKA,EAAaC,EAAa,CAC7BC,WAAY,CACVC,QAAAA,GAEFC,OAAQ,IACHC,EAAe,CAChBC,EACAC,EAAU,WACVC,EACAC,GACC,WAELC,MAAO,CACLC,WAAY,CACVC,KAAM,CACJC,OACAC,OACAC,OACAC,SAEFC,QAAS,IAEXC,KAAM,CACJN,KAAMC,OACNI,QAAS,MAEXE,GAAI,CACFP,KAAMC,OACNI,QAAS,MAEXG,YAAa,CACXR,KAAMC,OACNI,QAAS,WAEXI,GAAIR,OACJS,MAAO,CACLC,MACAT,QAEFU,MAAOX,OACPY,MAAO,CACLb,KAAMI,QACNC,SAAS,GAEXS,SAAU,CACRd,KAAMI,QACNC,SAAS,GAEXU,SAAU,CACRf,KAAMI,QACNC,SAAS,GAEXW,aAAc,CACZhB,KAAMI,QACNC,SAAS,GAEXY,QAAS,CACPjB,KAAMI,QACNC,SAAS,GAEXa,MAAO,CACLlB,KAAMC,OACNI,QAAS,OAGbc,MAAO,CACL,oBACA,SACA,SAEFC,MAAMtB,GAAOuB,KAAEA,EAAAC,MAAMA,IACnB,MAAMC,EAAWC,EAAI,MACfC,EAAQD,EAAI,CAAC,UAAW,UAAW,UAAW,WACpDD,EAASG,MAAQ5B,EAAMC,WAEjB,MAKA4B,EAAaC,GAAS,IACnB9B,EAAMgB,UAAYhB,EAAMmB,UAM1B,OAJDY,GAAA,IAAM/B,EAAMC,aAAwB+B,IACxCP,EAASG,MAAQI,KAGZ,CACLP,SAAAA,EACAI,WAAAA,EACAI,SAfgBC,IAChBX,EAAK,oBAAqBE,EAASG,OACnCL,EAAK,SAAUE,EAASG,OACxBL,EAAK,QAASvB,EAAMY,MAAMsB,EAAEC,OAAOC,QAAQC,cAAgB,KAa3DV,MAAAA,SApHkBW,IAAK,+JADjBC,OAAAA,IAAAC,EAAoB,MAAmB,+CAClC,yCAaPC,EAAA,IAAA,GAZDC,QAAsB,0EACV,gCAUN,IAAA,iBATkBC,sBAAcC,EAAA,OAAA,GAAAC,GAAAC,EAAArB,SAAAoB,GAAEE,MAAM,SAAGpC,GAAAmC,KAAuB9B,SAAU8B,EAAQjB,WAAGZ,gFAG3F,CAFsB+B,EAAAF,EAAwBG,OAAA,iBAAA,CAAGvC,YAAsBoC,EAAApC,uBAEvEoC,EAAA7C,aAD0H,IAAA,CAAxHyC,EAAsB,SAAA,CAAEK,MAAQ,iBAA4CtB,SAAQ,KAARqB,EAAQ7C,YAAA,OAAA6C,EAAA7C,WAACe,SAAQ,0CAKzF,GAAAwB,EAAAU,EAAA,KAAAC,EAAAL,EAAAlC,OAAA,CAAAwC,EAAAC,MAFUP,EAAAG,OAAA,SAAA,CAAGG,KAAAA,OAEb,CAAA5C,KAAA,MAAAsC,EAAAtC,KAAA4C,EAAAA,EAAAN,EAAAtC,MAAAP,WAAA,MAAA6C,EAAArC,GAAA2C,EAAAA,EAAAN,EAAArC,aADG8B,IAAsBC,EAAA,SAAA,CAACO,MAAA,iBAA2CO,UAAS,MAAAR,EAAAtC,KAAkB4C,EAAOA,EAAAN,EAAAtC,MAAIoB,MAAU,MAAAkB,EAAArC,GAAA2C,EAAAA,EAAAN,EAAArC,wCANvG"}