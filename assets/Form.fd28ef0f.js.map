{"version":3,"file":"Form.fd28ef0f.js","sources":["../../src/components/InventoryCondition/Form.vue"],"sourcesContent":["<template>\n  <div class=\"grid grid-cols-2\">\n    <div class=\"col-span-1\">\n      <div class=\"mb-2\">\n        <Input v-model=\"data.condition_name\" label=\"Set Condition\" :view=\"validation.condition_name.$invalid ? 'danger' : 'default'\" block />\n        <small class=\"text-red-base block\" v-for=\"(error, errorIndex) of validation.condition_name.$errors\" :key=\"errorIndex\">{{ error.$message }}. </small>\n      </div>\n      <!-- <div class=\"my-2\">\n        <Input v-model=\"data.condition_title\" label=\"Title\" :view=\"validation.condition_title.$invalid ? 'danger' : 'default'\" block />\n        <small class=\"text-red-base block\" v-for=\"(error, errorIndex) of validation.condition_title.$errors\" :key=\"errorIndex\">{{ error.$message }}. </small>\n      </div>\n      <div class=\"my-2\">\n        <label>Terms</label>\n        <div v-for=\"(term, termIndex) of data.terms\" :key=\"termIndex\" class=\"flex items-center mb-4\">\n          <div class=\"flex justify-center items-center px-4\">\n            <Button @click=\"handleDeleteTerm(termIndex)\" view=\"smooth\" color=\"red\" dense>\n              <i class=\"material-icons text-lg\">delete</i>\n            </Button>\n          </div>\n          <div class=\"px-2 w-full\">\n            <Input :value=\"term\" block @change=\"(e) => handleUpdateTerm(e, termIndex)\" />\n          </div>\n        </div>\n        <div class=\"flex items-center mb-4\">\n          <div class=\"flex justify-center items-center px-4\">\n            <Button @click=\"handleAddTerm\" :disabled=\"!data.condition_name || !data.condition_title\" view=\"smooth\" color=\"teal\" dense>\n              <i class=\"material-icons text-lg\">add</i>\n            </Button>\n          </div>\n          <div class=\"px-2 w-full\">\n            <Input v-model=\"term\" block />\n          </div>\n        </div>\n      </div> -->\n    </div>\n  </div>\n</template>\n\n<script>\nimport { defineComponent, reactive, ref, watch } from 'vue'\nimport Input from 'bbUi/components/input/input.vue'\nimport Select from 'bbUi/components/select/select.vue'\nimport Button from 'bbUi/components/button/button.vue'\nimport { useVuelidate } from '@vuelidate/core'\nimport { required } from '@/validations/index'\nimport { ElMessage } from 'element-plus'\n\nexport default defineComponent({\n  components: {\n    Input,\n    Select,\n    Button\n  },\n  props: {\n    condition_name: {\n      type: String,\n      default: ''\n    },\n    // terms: {\n    //   type: Array,\n    //   default: () => ([])\n    // }\n  },\n  emits: ['change'],\n  setup(props, { emit }) {\n    // const term = ref('')\n    const data = reactive({\n      condition_name: props.condition_name,\n      // condition_title: !!props.terms?.length ? props.terms[0] : '',\n      // terms: !!props.terms?.length ? props.terms.slice(1) : []\n    })\n    // const handleUpdateTerm = (event, termIndex) => {\n    //   if(!event.target.value){\n    //     handleDeleteTerm(termIndex)\n    //     return\n    //   }\n    //   data.terms[termIndex] = event.target.value\n    // }\n    // const handleAddTerm = () => {\n    //   if(!term.value) return ElMessage({\n    //     type: 'warning',\n    //     message: `Term is required`\n    //   })\n    //   data.terms.push(term.value)\n    //   term.value = ''\n    // }\n    // const handleDeleteTerm = (termIndex) => {\n    //   data.terms.splice(termIndex, 1)\n    // }\n    const rules = {\n      condition_name: {\n        required\n      },\n      // condition_title: {\n      //   required\n      // }\n    }\n    const validation = useVuelidate(rules, data, {\n      $lazy: true\n    })\n    const validate = () => {\n      validation.value.$validate()\n      return !validation.value.$invalid\n    }\n    watch(() => data, (newData) => {\n      const tempData = Object.assign({}, {\n        condition_name: newData.condition_name,\n        // terms: [newData.condition_title, ...newData.terms]\n      })\n      emit('change', tempData)\n    }, {\n      deep: true,\n      immediate: true\n    })\n    return {\n      data,\n      // term,\n      validation,\n      // handleUpdateTerm,\n      // handleAddTerm,\n      // handleDeleteTerm,\n      validate\n    }\n  }\n})\n</script>"],"names":["_sfc_main","defineComponent","components","Input","Select","Button","props","condition_name","type","String","default","emits","[object Object]","emit","data","reactive","validation","useVuelidate","required","$lazy","watch","newData","tempData","Object","assign","deep","immediate","validate","value","$validate","$invalid","_hoisted_1","class","_hoisted_2","_openBlock","_createElementBlock","_createElementVNode","_hoisted_3","_createVNode","_component_Input","modelValue","_ctx","onUpdate:modelValue","_cache","$event","label","view","_Fragment","_renderList","$errors","error","errorIndex"],"mappings":"2RA+CA,MAAKA,EAAaC,EAAa,CAC7BC,WAAY,OACVC,EACAC,OAAAA,SACAC,GAEFC,MAAO,CACLC,eAAgB,CACdC,KAAMC,OACNC,QAAS,KAObC,MAAO,CAAC,UACRC,MAAMN,GAAOO,KAAEA,IAEb,MAAMC,EAAOC,EAAS,CACpBR,eAAgBD,EAAMC,iBA8BlBS,EAAaC,EARL,CACZV,eAAgB,CACdW,SAAAA,IAMmCJ,EAAM,CAC3CK,OAAO,IAgBF,OAVDC,GAAA,IAAMN,IAAOO,IACX,MAAAC,EAAWC,OAAOC,OAAO,GAAI,CACjCjB,eAAgBc,EAAQd,iBAG1BM,EAAK,SAAUS,KACd,CACDG,MAAM,EACNC,WAAW,IAEN,CACLZ,KAAAA,EAEAE,WAAAA,EAIAW,SArBe,KACfX,EAAWY,MAAMC,aACTb,EAAWY,MAAME,cApGtBC,EAAA,CAAAC,MAAM,oBACJC,EAAA,CAAAD,MAAM,6FADbE,OAAAA,IAgCMC,EAAA,MAAAJ,EAAA,CA/BJK,EAAA,QAGM,GAFiI,MAAAC,EAAA,CAArHC,EAAAC,EAAmB,CAAnBC,WAAAC,EAAA3B,KAAAP,eAAqBmC,sBAAqBC,EAAA,KAAAA,EAAA,GAAAC,GAAAH,EAAA3B,KAAAP,eAAAqC,GAAEC,MAAM,gBAA2DC,OAAK9B,WAAAT,eAAAuB,SAAA,SAAA,yCACkB,kBAAAiB,EAAA,KAAAC,EAAAP,EAAAzB,WAAAT,eAAA0C,SAAA,CAAAC,EAAAC,SAAlHhB,EAAA,QAAA,CAAmEH,MAAe"}