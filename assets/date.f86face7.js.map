{"version":3,"file":"date.f86face7.js","sources":["../../src/utils/date.js"],"sourcesContent":["const instance = () => ({\n  _date: null,\n  setDate(date) {\n    this._date = date instanceof Date ? date : new Date(date)\n    return this\n  },\n  get now () {\n    return this._date\n  },\n  get seconds() {\n    return this._date.getSeconds() + 1\n  },\n  get minutes() {\n    return this._date.getMinutes() + 1\n  },\n  get hours() {\n    return this._date.getHours() + 1\n  },\n  get date() {\n    return this._date.getDate()\n  },\n  get month() {\n    return this._date.getMonth() + 1\n  },\n  get year() {\n    return this._date.getFullYear()\n  },\n  get today() {\n    return new Date()\n  },\n  get yesterday() {\n    return 3600 * 1000 * 24\n  },\n  get weekAgo() {\n    return 3600 * 1000 * 24 * 7\n  },\n  get monthAgo() {\n    return 3600 * 1000 * 24 * 30\n  },\n  get yearAgo() {\n    return 3600 * 1000 * 24 * 30 * 12\n  }\n})\n\nconst newInstance = (date = new Date()) => {\n  return instance(date).setDate(date)\n}\n\nconst format = date => {\n  const instanceDate = newInstance(date)\n  return `0${instanceDate.month}`.slice(-2) + '/' + `0${instanceDate.date}`.slice(-2) + '/' + instanceDate.year\n}\nconst formatDatabase = date => {\n  if(date instanceof Date && !isNaN(date)) {\n    const instanceDate = newInstance(date)\n    return instanceDate.year + '-' + `0${instanceDate.month}`.slice(-2) + '-' + `0${instanceDate.date}`.slice(-2)\n  }\n  else return null\n}\nconst dateRangeOfMonth = (value = 0) => {\n  const date = new Date()\n  return [\n    new Date(date.getFullYear(), date.getMonth() + (value), 1),\n    new Date(date.getFullYear(), date.getMonth() + (value + 1), 0),\n  ]\n}\n\nconst monthDiff = (date1, date2) => {\n  date1 = new Date(date1)\n  date2 = new Date(date2)\n  let months = 0\n  months = (date2.getFullYear() - date1.getFullYear()) * 12\n  months -= date1.getMonth()\n  months += date2.getMonth()\n  return months <= 0 ? 0 : months\n}\n\n\nexport {\n  monthDiff,\n  format,\n  formatDatabase,\n  dateRangeOfMonth\n}\nexport default newInstance"],"names":["instance","_date","[object Object]","date","this","Date","now","seconds","getSeconds","minutes","getMinutes","hours","getHours","getDate","month","getMonth","year","getFullYear","today","yesterday","weekAgo","monthAgo","yearAgo","newInstance","setDate","format","instanceDate","slice","formatDatabase","isNaN","dateRangeOfMonth","value"],"mappings":"AAAA,MAAMA,EAAW,KAAO,CACtBC,MAAO,KACPC,QAAQC,GAEC,OADPC,KAAKH,MAAQE,aAAgBE,KAAOF,EAAO,IAAIE,KAAKF,GAC7CC,MAAAE,UAGP,OAAOF,KAAKH,OAAAM,cAGL,OAAAH,KAAKH,MAAMO,aAAe,GAAAC,cAG1B,OAAAL,KAAKH,MAAMS,aAAe,GAAAC,YAG1B,OAAAP,KAAKH,MAAMW,WAAa,GAAAT,WAG/B,OAAOC,KAAKH,MAAMY,WAAAC,YAGX,OAAAV,KAAKH,MAAMc,WAAa,GAAAC,WAG/B,OAAOZ,KAAKH,MAAMgB,eAAAC,YAGlB,OAAO,IAAIb,MAAAc,gBAGX,OAAO,OAAcC,cAGd,OAAA,QAAmBC,eAGnB,OAAA,QAAmBC,cAGnB,OAAA,WAILC,EAAc,CAACpB,EAAO,IAAIE,OACvBL,IAAewB,QAAQrB,GAG1BsB,EAAiBtB,IACrB,MAAMuB,EAAeH,EAAYpB,GACjC,MAAO,IAAIuB,EAAaZ,QAAQa,OAAY,GAAA,IAAM,IAAID,EAAavB,OAAOwB,OAAY,GAAA,IAAMD,EAAaV,MAErGY,EAAyBzB,IAC7B,GAAGA,aAAgBE,OAASwB,MAAM1B,GAAO,CACvC,MAAMuB,EAAeH,EAAYpB,GACjC,OAAOuB,EAAaV,KAAO,IAAM,IAAIU,EAAaZ,QAAQa,OAAM,GAAM,IAAM,IAAID,EAAavB,OAAOwB,OAAM,GAEhG,OAAA,MAERG,EAAmB,CAACC,EAAQ,KAChC,MAAM5B,EAAO,IAAIE,KACV,MAAA,CACL,IAAIA,KAAKF,EAAKc,cAAed,EAAKY,WAAcgB,EAAQ,GACxD,IAAI1B,KAAKF,EAAKc,cAAed,EAAKY,cAAsB,GAAI"}