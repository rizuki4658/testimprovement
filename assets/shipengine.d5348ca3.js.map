{"version":3,"file":"shipengine.d5348ca3.js","sources":["../../src/composable/integration/shipengine.js"],"sourcesContent":["import { reactive, computed } from 'vue'\nimport { useStore } from 'vuex'\nimport { required } from '@/validations/index'\nimport { isFunction } from 'utils/is'\n\nexport const useConnect = () => {\n  const store = useStore()\n  const rules = reactive({\n    api_key: {\n      required\n    }\n  })\n\n  const loading = computed(\n    () => store.state.integration.shipengine.loading.connect\n  )\n\n  const setCredential = (apiKey = null) =>\n    store.commit('integration/shipengine/SET_CREDENTIAL', apiKey)\n  const connect = async () => {\n    try {\n      store.commit('integration/shipengine/SET_CONNECT_LOADING', true)\n      await store.dispatch('integration/shipengine/connect')\n    } finally {\n      store.commit('integration/shipengine/SET_CONNECT_LOADING', false)\n    }\n  }\n\n  return {\n    rules,\n    loading,\n    setCredential,\n    connect\n  }\n}\n\nexport const useShippingKit = () => {\n  const store = useStore()\n  const loading = computed(\n    () => store.state.integration.shipengine.loading.shippingKit\n  )\n  const shippingKit = computed({\n    get: () => ({ ...store.state.integration.shipengine.shippingKit }),\n    set: (newValue) => {\n      store.commit('integration/shipengine/SET_SHIPPING_KIT', newValue)\n    }\n  })\n  const fetchShippingKit = async () => {\n    try {\n      store.commit(\n        'integration/shipengine/SET_LOADING_FETCH_SHIPPING_KIT',\n        true\n      )\n      // await store.dispatch('integration/shipengine/fetchShippingKit')\n    } finally {\n      store.commit(\n        'integration/shipengine/SET_LOADING_FETCH_SHIPPING_KIT',\n        false\n      )\n    }\n  }\n  const updateShippingKit = async () => {\n    try {\n      store.commit(\n        'integration/shipengine/SET_LOADING_UPDATE_SHIPPING_KIT',\n        true\n      )\n      // await store.dispatch('integration/shipengine/updateShippingKit')\n    } finally {\n      store.commit(\n        'integration/shipengine/SET_LOADING_UPDATE_SHIPPING_KIT',\n        false\n      )\n    }\n  }\n  return {\n    store,\n    loading,\n    shippingKit,\n    fetchShippingKit,\n    updateShippingKit\n  }\n}\n\nexport const useShippingProvider = () => {\n  const store = useStore()\n  const carriers = computed(\n    () => store.state.integration.shipengine.shippingProvider.carriers\n  )\n  const carrierFilters = computed(() => store.state.integration.shipengine.shippingProvider.filters)\n  const selectedCarrier = computed(\n    () => store.getters['integration/shipengine/selectedCarrier']\n  )\n  const loading = computed(() => store.state.integration.shipengine.loading)\n  const fetchCarriers = async () => {\n    try {\n      store.commit('integration/shipengine/SET_LOADING_FETCH_CARRIERS', true)\n      await store.dispatch('integration/shipengine/fetchCarriers')\n      return null\n    }catch(err){\n      return err\n    } finally {\n      store.commit('integration/shipengine/SET_LOADING_FETCH_CARRIERS', false)\n    }\n  }\n  const updateCarrier = async (callback = () => {}) => {\n    try {\n      store.commit('integration/shipengine/SET_LOADING_UPDATE_CARRIER', true)\n      await store.dispatch('integration/shipengine/updateCarrier')\n      isFunction(callback) && callback(null, null)\n    } catch (err) {\n      isFunction(callback) && callback(err, null)\n    } finally {\n      store.commit('integration/shipengine/SET_LOADING_UPDATE_CARRIER', false)\n    }\n  }\n  const selectCarrier = (carrier) =>\n    store.commit('integration/shipengine/SET_SELECTED_CARRIER', carrier)\n  const resetSelectedCarrier = () =>\n    store.commit('integration/shipengine/RESET_SELECTED_CARRIER')\n  return {\n    loading,\n    carriers,\n    carrierFilters,\n    selectedCarrier,\n    fetchCarriers,\n    updateCarrier,\n    selectCarrier,\n    resetSelectedCarrier\n  }\n}\n\nexport const useConfig = () => {\n  const store = useStore()\n  const loading = computed(() => store.state.integration.shipengine.loading)\n  const tabs = computed(() => [\n    {\n      id: 1,\n      name: 'Shipping Provider',\n      to: {\n        name: 'integrationShipengineConfigShippingProvider'\n      }\n    },\n    // {\n    //   id: 2,\n    //   name: 'Edit Shipping Kit',\n    //   to: {\n    //     name: 'integrationShipengineConfigShippingKit'\n    //   }\n    // }\n  ])\n  const checkIntegrationStatus = async () => {\n    try {\n      store.commit(\n        'integration/shipengine/SET_LOADING_INTEGRATION_CHECKS',\n        true\n      )\n      const integrations = await store.dispatch('integration/all')\n      const integration = integrations.find(\n        (integration) => integration.id == 18\n      )\n      return integration?.is_ready == 1\n    } finally {\n      store.commit(\n        'integration/shipengine/SET_LOADING_INTEGRATION_CHECKS',\n        false\n      )\n    }\n  }\n\n  return {\n    tabs,\n    loading,\n    checkIntegrationStatus\n  }\n}\n\nexport const useStatus = () => {\n  const store = useStore()\n  const loading = computed(() => store.state.integration.shipengine)\n  const status = computed(() => store.state.integration.shipengine.status)\n  const fetchStatus = async () => {\n    try {\n      store.commit('integration/shipengine/SET_LOADING_FETCH_STATUS', true)\n      await store.dispatch('integration/shipengine/fetchStatus')\n    } finally {\n      store.commit('integration/shipengine/SET_LOADING_FETCH_STATUS', false)\n    }\n  }\n  return {\n    status,\n    loading,\n    fetchStatus\n  }\n}\n"],"names":["useConnect","store","useStore","rules","reactive","api_key","required","loading","computed","state","integration","shipengine","connect","setCredential","apiKey","commit","async","dispatch","useShippingKit","shippingKit","get","__spreadValues","set","newValue","fetchShippingKit","updateShippingKit","useShippingProvider","carriers","shippingProvider","carrierFilters","filters","selectedCarrier","getters","fetchCarriers","err","updateCarrier","callback","isFunction","selectCarrier","carrier","resetSelectedCarrier","useConfig","tabs","id","name","to","checkIntegrationStatus","find","integration2","is_ready","useStatus","status","fetchStatus"],"mappings":"gWAKY,MAACA,EAAa,KACxB,MAAMC,EAAQC,IAsBP,MAAA,CACLC,MAtBYC,EAAS,CACrBC,QAAS,CACPC,SAAAA,KAqBFC,QAjBcC,GACd,IAAMP,EAAMQ,MAAMC,YAAYC,WAAWJ,QAAQK,UAiBjDC,cAdoB,CAACC,EAAS,OAC9Bb,EAAMc,OAAO,wCAAyCD,GActDF,QAbcI,UACV,IACFf,EAAMc,OAAO,8CAA8C,SACrDd,EAAMgB,SAAS,kCACb,QACRhB,EAAMc,OAAO,8CAA8C,OAYpDG,EAAiB,KAC5B,MAAMjB,EAAQC,IACRK,EAAUC,GACd,IAAMP,EAAMQ,MAAMC,YAAYC,WAAWJ,QAAQY,cAE7CA,EAAcX,EAAS,CAC3BY,IAAK,uHAAOC,CAAA,GAAKpB,EAAMQ,MAAMC,YAAYC,WAAWQ,aACpDG,IAAMC,IACJtB,EAAMc,OAAO,0CAA2CQ,MA+BrD,MAAA,CACLtB,MAAAA,EACAM,QAAAA,EACAY,YAAAA,EACAK,iBAhCuBR,UACnB,IACFf,EAAMc,OACJ,yDACA,GAGM,QACRd,EAAMc,OACJ,yDACA,KAuBJU,kBAnBwBT,UACpB,IACFf,EAAMc,OACJ,0DACA,GAGM,QACRd,EAAMc,OACJ,0DACA,OAaKW,EAAsB,KACjC,MAAMzB,EAAQC,IACRyB,EAAWnB,GACf,IAAMP,EAAMQ,MAAMC,YAAYC,WAAWiB,iBAAiBD,WAEtDE,EAAiBrB,GAAS,IAAMP,EAAMQ,MAAMC,YAAYC,WAAWiB,iBAAiBE,UACpFC,EAAkBvB,GACtB,IAAMP,EAAM+B,QAAQ,4CA6Bf,MAAA,CACLzB,QA5BcC,GAAS,IAAMP,EAAMQ,MAAMC,YAAYC,WAAWJ,UA6BhEoB,SAAAA,EACAE,eAAAA,EACAE,gBAAAA,EACAE,cA/BoBjB,UAChB,IAGK,OAFPf,EAAMc,OAAO,qDAAqD,SAC5Dd,EAAMgB,SAAS,wCACd,KAAA,MACFiB,GACE,OAAAA,EACC,QACRjC,EAAMc,OAAO,qDAAqD,KAwBpEoB,cArBoBnB,MAAOoB,EAAW,YAClC,IACFnC,EAAMc,OAAO,qDAAqD,SAC5Dd,EAAMgB,SAAS,wCACVoB,EAAAD,IAAaA,EAAS,KAAM,MAAA,MAChCF,GACIG,EAAAD,IAAaA,EAASF,EAAK,MAC9B,QACRjC,EAAMc,OAAO,qDAAqD,KAcpEuB,cAXqBC,GACrBtC,EAAMc,OAAO,8CAA+CwB,GAW5DC,qBAV2B,IAC3BvC,EAAMc,OAAO,mDAaJ0B,EAAY,KACvB,MAAMxC,EAAQC,IACRK,EAAUC,GAAS,IAAMP,EAAMQ,MAAMC,YAAYC,WAAWJ,UAoC3D,MAAA,CACLmC,KApCWlC,GAAS,IAAM,CAC1B,CACEmC,GAAI,EACJC,KAAM,oBACNC,GAAI,CACFD,KAAM,mDAgCVrC,QAAAA,EACAuC,uBAtB6B9B,UACzB,IACFf,EAAMc,OACJ,yDACA,GAEI,MACAL,SADqBT,EAAMgB,SAAS,oBACT8B,MAC9BC,GAAkC,IAAlBA,EAAYL,KAE/B,OAAgC,qBAAZM,UACZ,QACRhD,EAAMc,OACJ,yDACA,OAYKmC,EAAY,KACvB,MAAMjD,EAAQC,IACRK,EAAUC,GAAS,IAAMP,EAAMQ,MAAMC,YAAYC,aAUhD,MAAA,CACLwC,OAVa3C,GAAS,IAAMP,EAAMQ,MAAMC,YAAYC,WAAWwC,SAW/D5C,QAAAA,EACA6C,YAXkBpC,UACd,IACFf,EAAMc,OAAO,mDAAmD,SAC1Dd,EAAMgB,SAAS,sCACb,QACRhB,EAAMc,OAAO,mDAAmD"}