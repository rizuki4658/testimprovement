{"version":3,"file":"index.dd0848f3.js","sources":["../../src/views/notification/index.vue"],"sourcesContent":["<template>\n    <div class=\"w-full\">\n        <h5 class=\"mb-10\">Notifications</h5>\n        <Card>\n            <Tab \n              :items=\"tab\" \n              by=\"value\" \n              name=\"label\" \n              component \n              color=\"teal\" \n              view=\"smooth\" \n              dense \n              v-model=\"selectedTab\"\n            />\n            <div v-loading=\"loading.show\" style=\"min-height: 200px\">\n                <template v-if=\"!appliedFilter && notificationState?.data?.length === 0\">\n                    <div class=\"flex flex-col justify-center items-center w-full h-64\">\n                        <span class=\"material-icons icon-updated\">drafts</span>\n                        <h5 class=\"mt-4 text-lg\">Youâ€™re all caught up!</h5>\n                        <p class=\"text-grey-03 mt-3\">There are no new notifications at this time.</p>\n                    </div>\n                </template>\n                <template v-else>\n                    <div class=\"w-full mt-8 flex justify-between items-center\">\n                        <div class=\"flex-1 flex gap-4 items-center\">\n                            <Input v-model=\"filter.search\" placeholder=\"Search\" icon class=\"w-full md:max-w-xl\">\n                                <template #icon>\n                                    <span class=\"material-icons\">search</span>\n                                </template>\n                            </Input>\n                            <FilterDropdown\n                                @item-click=\"handleDropdownItemClick\"\n                                :filters=\"dropdownFilterOptions\"\n                                @apply-filter=\"handleApplyFilter\"\n                                @reset-filter=\"handleResetFilter\"\n                                @collapse=\"isDateShow = false\"\n                                :reset-disabled=\"disabledFilter\"\n                                :apply-disabled=\"disabledFilter\"\n                                :loading=\"loading.listType\"\n                                :item-disable-hover=\"dropdownItemFilterDisableHover\"\n                            >\n                                <template #label=\"{ item }\">\n                                    <div>\n                                        <p class=\"text-grey-03\">\n                                            {{ item.name }}\n                                            <span v-if=\"item.meta.count_selected > 0\">\n                                            ({{ item.meta.count_selected }})\n                                        </span>\n                                        </p>\n                                        <DatePicker\n                                            v-if=\"item.key === 'date'\"\n                                            v-model=\"selectedDate\"\n                                            v-bind=\"filterDateOptions\"\n                                            placement=\"right\"\n                                            type=\"daterange\"\n                                            ref=\"filterDateRef\"\n                                            class=\"hide-picker\"\n                                        />\n                                    </div>\n                                </template>\n                                <template #dropdown=\"{ filter, collapse }\">\n                                    <div class=\"flex flex-col p-3\">\n                                        <template v-if=\"filter.key === 'type'\">\n                                            <a\n                                            v-for=\"type in listType\"\n                                            @click.prevent=\"\n                                            () => {\n                                                selectedType = type\n                                                collapse()\n                                            }\n                                            \"\n                                            :key=\"type\"\n                                            href=\"\"\n                                            :class=\"[\n                                            'text-grey-03',\n                                            'p-3',\n                                            'block',\n                                            'hover:bg-grey-lighten',\n                                            ]\"\n                                            >\n                                            <p class=\"capitalize\">{{ type }}</p>\n                                            </a>\n                                        </template>\n                                    </div>\n                                </template>\n                            </FilterDropdown>\n                        </div>\n                        <div class='flex gap-4'>\n                            <template v-if=\"notificationState?.has_unread_notifications\">\n                                <Button @click=\"handleMultipleMarkAsRead\" v-if=\"selectedUnreadIds?.length\" color=\"teal\" view='outlined' :loading=\"loading.markAllAsRead\" :disabled=\"loading.markAllAsUnread\"><span class=\"material-icons mr-2\">drafts</span> Mark {{ selectedUnreadIds?.length }} as read</Button>\n                                <Button @click=\"handleMarkAllAsRead\" v-else color=\"teal\" view='outlined' :loading=\"loading.markAllAsRead\" :disabled=\"loading.markAllAsUnread\"><span class=\"material-icons mr-2\">drafts</span> Mark all as read</Button>\n                            </template>\n                            <template v-if=\"selectedTab == 'all' && notificationState?.has_read_notifications\">\n                                <Button @click=\"handleMultipleMarkAsUnread\" v-if=\"selectedTab === 'all' && selectedReadIds?.length\" color=\"teal\" view='outlined' :loading=\"loading.markAllAsUnread\" :disabled=\"loading.markAllAsRead\"><span class=\"material-icons mr-2\">mark_email_unread</span> Mark {{ selectedReadIds?.length }} as unread</Button>\n                                <Button @click=\"handleMarkAllAsUnread\" v-else color=\"teal\" view='outlined' :loading=\"loading.markAllAsUnread\" :disabled=\"loading.markAllAsRead\"><span class=\"material-icons mr-2\">mark_email_unread</span> Mark all as unread</Button>\n                            </template>\n                        </div>\n                    </div>\n                    <div class=\"flex gap-6 items-center mt-4\">\n                        <Button v-if=\"filter.from || filter.to\" color=\"grey\" view=\"smooth\" dense>\n                            <b>Date:</b> {{ format(filter.from) }} to {{ format(filter.to) }}<i class=\"material-icons text-sm ml-2\" @click=\"handleResetDate\">close</i>\n                        </Button>\n                        <Button v-if=\"filter.type\" color=\"grey\" view=\"smooth\" dense class=\"capitalize\">\n                            <b>Type:</b> {{ filter.type }} <i class=\"material-icons text-sm ml-2\" @click=\"handleResetType\">close</i>\n                        </Button>\n                        <Button v-if=\"filter.from || filter.to || filter.type\" color=\"grey\" view=\"smooth\" dense>\n                            Clear All <i class=\"material-icons text-sm ml-2\" @click=\"handleResetFilter\">close</i>\n                        </Button>\n                    </div>\n                    <BTable\n                    @row-click=\"handleShowModal\"\n                    :items=\"notificationState?.data || []\"\n                    :headers=\"notificationHeaders || []\"\n                    selectable\n                    v-model:selected=\"selectedIds\"\n                    :clickable-row=\"true\"\n                    :item-value=\"'id'\"\n                    class=\"mt-4 mb-8\"\n                    :loading=\"loading.show\"\n                    >\n                    <template #column=\"{row, column, key}\">\n                        <td v-if=\"key === 'title'\">\n                        <p :class=\"row.mark_as_read == 0 ? 'font-semibold text-black' : ''\">{{ column }}</p>\n                        </td>\n                        <td v-else-if=\"key === 'description'\">\n                        <p class=\"leading-7\" :class=\"row.mark_as_read == 0 ? 'font-semibold text-black' : ''\">{{ column }}</p>\n                        </td>\n                        <td v-else-if=\"key === 'type_notification'\">\n                        <div class=\"flex items-center text-black\">\n                            <span class=\"material-icons\" :class=\"column === 'info' ? 'text-blue-04' : 'text-orange-04'\">\n                            {{ column === 'info' ? 'info' : 'warning' }}\n                            </span>\n                            <p class=\"ml-2 capitalize\">{{ column }}</p>\n                        </div>\n                        </td>\n                        <td v-else-if=\"key === 'created_at'\">\n                        <p class='text-black'>{{ column }}</p>\n                        </td>\n                        <td v-else-if=\"key === 'actions'\">\n                        <Dropdown trigger=\"click\" hide-on-click placement=\"bottom-end\">\n                            <button @click.stop class=\"btn-action\">\n                                <span class=\"material-icons\">more_horiz</span>\n                            </button>\n                            <template #dropdown>\n                            <DropdownMenu @click=\"handleChangeStatus(row)\" class=\"py-1\">\n                                <DropdownItem>\n                                <p class=\"text-sm\">\n                                    <span class=\"material-icons mr-2\">\n                                    {{ row.mark_as_read == 1 ? 'drafts' : 'mark_email_unread' }}\n                                    </span>\n                                    {{ row.mark_as_read == 0 ? 'Mark as read' : 'Mark as unread' }}\n                                </p>\n                                </DropdownItem>\n                            </DropdownMenu>\n                            </template>\n                        </Dropdown>\n                        </td>\n                        <td v-else>{{ column || '-'}}</td>\n                    </template>\n                    </BTable>\n                    <div v-if=\"notificationState?.total > filter.limit\">\n                    <Pagination v-model:page=\"filter.page\" v-model:limit=\"filter.limit\" :data=\"notificationState\"></Pagination>\n                    </div>\n                </template>\n            </div>\n        </Card>\n    </div>\n\n    <NotificationModalDetail v-model=\"showModal\" title=\"Message Info\" :data=\"notificationDetail\" @onClose=\"handleCloseModal(notificationDetail)\" :loading=\"loading.showDetail\" />\n</template>\n\n<script setup>\nimport { ref, reactive, computed, onMounted, watch, nextTick } from 'vue'\n\nimport Card from 'bbUi/components/card/card.vue'\nimport Tab from 'bbUi/components/tab/tab.vue'\nimport Input from 'bbUi/components/input/input.vue'\nimport Button from 'bbUi/components/button/button.vue'\nimport FilterDropdown from 'components/FilterDropdown.vue'\nimport BTable from 'components/BTable/BTable.vue'\nimport Pagination from 'components/Pagination.vue'\n\nimport { useUser } from 'composable/user'\nimport { useNotification } from 'composable/notification'\nimport debounce from 'utils/debounce'\nimport { ElMessage } from 'element-plus'\nimport { useStore } from 'vuex'\nimport { format } from 'utils/date'\nimport NotificationModalDetail from 'components/Notification/NotificationList/NotificationModalDetail.vue'\n\nconst {\n    tab, \n    filter, \n    resetFilter, \n    loading, \n    actionShow, \n    notificationState, \n    notificationDetail,\n    actionShowDetail, \n    actionMarkAsRead, \n    actionMarkAsUnread, \n    actionMarkAllAsRead, \n    actionMarkAllAsUnread,\n    actionListType,\n    listType\n} = useNotification()\n\nconst store = useStore()\nconst { dateByTimezone } = useUser()\nconst isDateShow = ref(false)\n\nconst dropdownFilterOptions = computed(() => {\n    return [\n        {\n            name: 'Select Date',\n            key: 'date',\n            count_selected: 0\n        },\n        {\n            name: 'Type',\n            key: 'type',\n            count_selected: 0\n        }\n    ]\n})\n\nconst selectedType = ref('')\nconst selectedIds = ref([])\nconst selectedUnreadIds = computed(() => {\n    const seen = new Set()\n    return selectedIds.value\n        .filter(item => {\n            const isUnread = item.mark_as_read === 0\n            const isUnique = !seen.has(item.id)\n            if (isUnread && isUnique) {\n                seen.add(item.id)\n                return true\n            }\n            return false\n        })\n        .map(item => item.id)\n})\n\nconst selectedReadIds = computed(() => {\n    const seen = new Set()\n    return selectedIds.value\n        .filter(item => {\n            const isRead = item.mark_as_read === 1\n            const isUnique = !seen.has(item.id)\n            if (isRead && isUnique) {\n                seen.add(item.id)\n                return true\n            }\n            return false\n        })\n        .map(item => item.id)\n})\n\nconst handleDropdownItemClick = (filter) => {\n    if(!filter) return\n    if(filter.key === 'date') filterDateFocus()\n}\n\nconst dropdownItemFilterDisableHover = (filter) => {\n    return filter.key === 'date'\n}\n\nconst handleCloseModal = async (row) => {\n    if(row.mark_as_read == 0) {\n        await actionMarkAsRead({\n            ids: [row.id]\n        })\n\n        await handleShowNotification()\n    }\n}\n\nconst handleApplyFilter = () => {\n    handleSelectDate()\n    filter.type = selectedType.value\n}\n\nconst handleResetFilter = () => {\n    selectedType.value = ''\n    selectedDate.value = null\n    resetFilter()\n}\n\nconst appliedFilter = computed(() => {\n    return filter.page !== 1 || \n           filter.limit !== 10 || \n           filter.from !== '' || \n           filter.to !== '' || \n           filter.type !== '' || \n           filter.search !== ''\n})\n\nconst handleChangeStatus = async (row) => {\n    if (row.mark_as_read == 0) {\n        await actionMarkAsRead({\n            ids: [row.id]\n        })\n    } else {\n        await actionMarkAsUnread({\n            ids: [row.id]\n        })\n    }\n\n    ElMessage({\n        type: 'success',\n        message: `Notification have been marked as ${row.mark_as_read == 0 ? 'read' : 'unread'}!`\n    })\n    await handleShowNotification()\n}\n\nconst handleMultipleMarkAsRead = async () => {\n    if(selectedIds?.value?.length) {\n        await actionMarkAsRead({\n            ids: selectedUnreadIds.value\n        })\n\n        selectedIds.value = []\n\n        await handleShowNotification()\n    }\n}\n\nconst handleMultipleMarkAsUnread = async () => {\n    if(selectedIds?.value?.length) {\n        await actionMarkAsUnread({\n            ids: selectedReadIds.value\n        })\n\n        selectedIds.value = []\n\n        await handleShowNotification()\n    }\n}\n\nconst filterDateOptions = reactive({\n    disabledDate(time) {\n        return time.getTime() > dateByTimezone.value.getTime()\n    }\n})\n\nconst filterDateRef = ref(null)\n\nconst filterDateFocus = async () => {\n    await nextTick()\n    if (filterDateRef.value) {\n        filterDateRef.value.focus()\n    }\n}\n\nconst selectedTab = ref('unread')\nconst selectedDate = ref(null)\n\nconst showModal = ref(false)\n\nconst notificationHeaders = [\n    { column_name: \"Notification\", key: \"title\", width: \"250px\" },\n    { column_name: \"Description\", key: \"description\", width: \"900px\" },\n    { column_name: \"Type\", key: \"type_notification\", width: \"100px\" },\n    { column_name: \"Date\", key: \"created_at\", width: \"100px\" },\n    { column_name: \"\", key: \"actions\" }\n]\n\nconst handleSelectDate = () => {\n    if(selectedDate.value) {\n        filter.from = selectedDate.value[0]\n        filter.to = selectedDate.value[1]\n    }\n}\n\nconst handleShowModal = async (row) => {\n    showModal.value = true\n    await actionShowDetail({\n        id: row.id\n    })\n}\n\nconst disabledFilter = computed(() => {\n    return !selectedDate.value && !selectedType.value\n})\n\nconst handleResetDate = () => {\n    selectedDate.value = null\n    filter.from = ''\n    filter.to = ''\n}\n\nconst handleResetType = () => {\n    selectedType.value = ''\n    filter.type = ''\n}\n\nconst handleShowNotification = async () => {\n    const payload = {\n        ...filter\n    }\n\n    if (selectedTab.value === 'unread') {\n        payload.mark_as_read = 0\n    } else {\n        payload.mark_as_read = 1\n    }\n\n    await actionShow(payload)\n}\n\nconst handleMarkAllAsRead = async () => {\n    try {\n        await actionMarkAllAsRead({\n            mark_as_read: 0\n        })\n        await handleShowNotification()\n        ElMessage({\n            type: 'success',\n            message: 'All notifications have been marked as read!'\n        })\n        selectedTab.value = 'all'\n    } catch (error) {\n        console.log(error)\n        ElMessage({\n            type: 'error',\n            message: error.message\n        })\n    }\n}\n\nconst handleMarkAllAsUnread = async () => {\n    try {\n        await actionMarkAllAsUnread()\n        await handleShowNotification()\n        ElMessage({\n            type: 'success',\n            message: 'All notifications have been marked as unread!'\n        })\n    } catch (error) {\n        console.log(error)\n        ElMessage({\n            type: 'error',\n            message: error.message\n        })\n    }\n}\n\nonMounted(async () => {\n    await handleShowNotification()\n    await actionListType()\n})\n\nwatch(() => ({...filter}), debounce(() => {\n    handleShowNotification()\n}, 500))\n\nwatch(selectedTab, async () => {\n    await resetFilter()\n    await handleShowNotification()\n})\n\nwatch(() => (store.state.notification.isHasUnreadNotification), async () => {\n    await handleShowNotification()\n}, { immediate: true })\n\n</script>\n\n<style scoped lang=\"scss\">\n    .btn-action {\n        @apply rounded-lg hover:bg-grey-01 hover:border-grey-03 w-8 h-8;\n        &:hover {\n            border: 1px solid;\n        }\n    }\n    .icon-updated {\n        font-size: 60px !important;\n    }\n</style>"],"names":["tab","filter","resetFilter","loading","actionShow","notificationState","notificationDetail","actionShowDetail","actionMarkAsRead","actionMarkAsUnread","actionMarkAllAsRead","actionMarkAllAsUnread","actionListType","listType","useNotification","store","useStore","dateByTimezone","useUser","isDateShow","ref","dropdownFilterOptions","computed","name","key","count_selected","selectedType","selectedIds","selectedUnreadIds","seen","Set","value","item","isUnread","mark_as_read","isUnique","has","id","add","map","selectedReadIds","isRead","handleDropdownItemClick","filter2","filterDateFocus","dropdownItemFilterDisableHover","handleApplyFilter","handleSelectDate","type","handleResetFilter","selectedDate","appliedFilter","page","limit","from","to","search","handleMultipleMarkAsRead","async","_a","length","ids","handleShowNotification","handleMultipleMarkAsUnread","filterDateOptions","reactive","disabledDate","time","getTime","filterDateRef","nextTick","focus","selectedTab","showModal","notificationHeaders","column_name","width","handleShowModal","row","disabledFilter","handleResetDate","handleResetType","payload","__spreadValues","handleMarkAllAsRead","_u","message","error","console","log","handleMarkAllAsUnread","onMounted","watch","debounce","state","notification","isHasUnreadNotification","immediate"],"mappings":"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"}