import{c as e,n as a,r as t,e as r,s as i,m as s,a as l,u as n}from"./index.6b6f6369.js";const m=e=>e.charAt(0).toUpperCase()+e.slice(1),p=(a,t="",r={})=>e.withMessage((e=>"email"===e.$validator?`${e.$property?m(e.$property):"This field"} is not a valid email address`:"numeric"===e.$validator?`${e.$property?m(e.$property):"This field"} must be a number`:"minLength"===e.$validator?`This field has a value of '${e.$model}' must have a min length of ${e.$params.min}`:"maxLength"===e.$validator?`This field has a value of '${e.$model}' must have a max length of ${e.$params.max}`:"validAddress"===t?"Please select a valid location from autocomplete list":"fileSize"===t?`File size must be less than ${r.maxKB}`:"fileType"===t?`File type must be ${r.type}`:"textOnly"===t?`${e.$property?m(e.$property.replace(/_/g," ")):"This field"} must contain letters only`:"numberOnly"===t?`${e.$property?m(e.$property.replace(/_/g," ")):"This field"} must contain numbers only`:"alphaNumeric"===t?`${e.$property?m(e.$property.replace(/_/g," ")):"This field"} must be alphanumeric (letters and numbers only)`:`${e.$property?m(e.$property.replace(/_/g," ")):"This field"} is required`),a),o=p(t),u=p(r);p(a);const d=p(i(!0),"validAddress"),$=e=>p(s(e)),y=e=>l(e),h=a=>p(e.withParams({type:"maxLengthCustom",max:a},(e=>null==e||""===e||l(a).$validator(e))),"maxLength"),f=n,c=(e=500)=>p((a=>{if(!a||!a.size)return!0;return a.size/1024<=e}),"fileSize",{maxKB:e}),v=(e="image/svg+xml")=>p((a=>!a||!a.type||a.type===e),"fileType",{type:e}),g={"Text Only":p(e.withParams({name:"textOnly"},(e=>{if(null==e||""===e)return!0;return/^[\p{L}\s.'’-]+$/u.test(e)})),"textOnly"),"Number Only":p(e.withParams({name:"numberOnly"},(e=>null==e||""===e||a.$validator(e))),"numberOnly"),Alphanumeric:p(e.withParams({name:"alphaNumeric"},(e=>{if(null==e||""===e)return!0;if("string"!=typeof e)return!1;const a=e.trim();return/^(?=.*\p{L})(?=.*\d)[\p{L}\d.'’-]+$/u.test(a)})),"alphaNumeric")};function x(e=[]){const a={};for(let t of e){const e=t.attribute_name;if(a[e]={},!0===t.is_required&&(a[e].required=o),t.max_length&&(a[e].maxLength=h(t.max_length)),t.validation_type){const r=g[t.validation_type],i=t.validation_type.replace(/\s/g,"");r&&(a[e][i]=r)}}return a}export{y as a,x as b,v as c,u as e,c as f,$ as m,o as r,f as u,d as v};
