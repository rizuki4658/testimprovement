{"version":3,"file":"billing.62018dd8.js","sources":["../../src/composable/billing.js"],"sourcesContent":["import { reactive, computed, ref } from 'vue'\nimport store from 'store'\nimport { isFunction } from 'utils/is'\nimport plansDetail from 'constants/packages'\n\nconst useLegacyPlan = () => {\n  const loading = ref(false)\n  const action = async (callback = () => { }) => {\n    loading.value = true\n    state.value = await store.dispatch('billing/plan')\n    isFunction(callback) && callback()\n    loading.value = false\n  }\n  const state = computed(() => {\n    return store.state.billing.plan\n  })\n\n  return {\n    state,\n    loading,\n    action\n  }\n}\n\nconst usePlan = () => {\n  const loading = reactive({\n    all: false,\n    checkout: false\n  })\n  const selectedSubscriptionOption = ref('monthly')\n  const selectedPlan = ref({\n    price_id: null,\n    total_selected_location: null\n  })\n  const subscriptionOptions = [{\n    id: 'monthly',\n    label: 'Monthly'\n  }, {\n    id: 'annually',\n    label: 'Yearly'\n  }]\n  const planOptions = reactive({\n    monthly: [],\n    annually: []\n  })\n  const plans = computed(() => {\n    return (planOptions[selectedSubscriptionOption.value] || []).sort((a, b) => a.sort - b.sort)\n  })\n  const getPlanDetailById = (planId) => {\n    // find matched plan detail, if not available use plan detail fallback on index 0\n    return plansDetail.find((plan) => plan.id === planId) || plansDetail[0]\n  }\n  const formatPlans = (plans = []) => plans.map((plan) => {\n    const formattedPlans = {\n      ...(getPlanDetailById(plan.package_id)),\n      price_id: plan.price_id,\n      price: plan.price,\n      is_current_plan: !!plan.current_price_id,\n      saving_amount: plan?.saving_amount || null\n    }\n    return formattedPlans\n  })\n  const getPlans = async () => {\n    try {\n      loading.all = true\n      const availablePlans = await store.dispatch('billing/getBillingPackages')\n      let { monthly: monthlyPlans = [], yearly: annuallyPlans = [] } = (availablePlans || {})\n      planOptions.monthly = formatPlans(monthlyPlans)\n      planOptions.annually = formatPlans(annuallyPlans)\n    } catch (err) {\n      console.warn(`Error fetching plans: `, err)\n    } finally {\n      loading.all = false\n    }\n  }\n  const checkoutPlanWithPriceId = async (data = {}, callback = () => { }) => {\n    try {\n      loading.checkout = true\n      const { price_id: priceId = undefined, total_location: totalLocation = undefined } = data || {}\n      const payload = {\n        data: {\n          price_id: priceId || selectedPlan.price_id,\n          total_location: totalLocation || selectedPlan.total_selected_location || null\n        }\n      }\n\n      if (!payload.data.price_id) throw new Error('Price ID cannot be empty')\n      const checkoutUrl = await store.dispatch('billing/checkoutBillingWithPriceId', payload)\n      isFunction(callback) && callback(null, checkoutUrl)\n    } catch (err) {\n      console.warn('Error checkouting package/plan ', err)\n      isFunction(callback) && callback(err, null)\n    } finally {\n      loading.checkout = false\n    }\n  }\n  const unsetSelectedPlan = () => {\n    selectedPlan.price_id = null\n    selectedPlan.total_selected_location = null\n  }\n\n  return {\n    loading,\n    selectedSubscriptionOption,\n    selectedPlan,\n    subscriptionOptions,\n    plans,\n    getPlans,\n    checkoutPlanWithPriceId,\n    unsetSelectedPlan\n  }\n}\n\nconst useBilling = () => {\n  const pagination = reactive({\n    page: 1,\n    limit: 10\n  })\n  const loading = ref(false)\n  const loadingCancelSubscription = ref(false)\n\n  const getPayment = async (payload, callback = () => { }) => {\n    loading.value = true\n    await store.dispatch('billing/showPayment', payload)\n    isFunction(callback) && callback()\n    loading.value = false\n  }\n  const getSubscription = async (payload, callback = () => { }) => {\n    loading.value = true\n    await store.dispatch('billing/showSubscription', payload)\n    isFunction(callback) && callback()\n    loading.value = false\n  }\n  const getInvoice = async (payload, callback = () => { }) => {\n    loading.value = true\n    await store.dispatch('billing/getInvoice', payload)\n    isFunction(callback) && callback()\n    loading.value = false\n  }\n  const showPlan = async (payload, callback = () => { }) => {\n    loading.value = true\n    await store.dispatch('billing/showPlan', payload)\n    isFunction(callback) && callback()\n    loading.value = false\n  }\n  const updatePayment = async (payload, callback = () => { }) => {\n    loading.value = true\n    await store.dispatch('billing/updatePayment', payload)\n    isFunction(callback) && callback()\n    loading.value = false\n  }\n  const updateBilling = async (payload, callback = () => { }) => {\n    loading.value = true\n    await store.dispatch('billing/updateBilling', payload)\n    isFunction(callback) && callback()\n    loading.value = false\n  }\n  const payment = computed(() => {\n    return store.state.billing.payment\n  })\n  const subscription = computed(() => {\n    return store.state.billing.subscription\n  })\n  const invoice = computed(() => {\n    return store.state.billing.invoice\n  })\n  const plan = computed(() => {\n    return store.state.billing.plan\n  })\n\n  return {\n    pagination,\n    payment,\n    subscription,\n    invoice,\n    plan,\n    loading,\n    loadingCancelSubscription,\n    getPayment,\n    getSubscription,\n    getInvoice,\n    cancelSubscription,\n    showPlan,\n    updatePayment,\n    updateBilling\n  }\n}\n\nconst useCancelSubscription = () => {\n  const data = reactive({\n    feedback: '',\n    note: '',\n    password: ''\n  })\n  const loading = ref(false)\n  const action = async (callback = () => { }) => {\n    try {\n      loading.value = true\n      await store.dispatch('billing/cancelSubscription', data)\n      isFunction(callback) && callback()\n    } finally {\n      loading.value = false\n    }\n  }\n  return {\n    data,\n    loading,\n    action\n  }\n}\n\nconst useUnpaidBilling = () => {\n  const loading = ref(false)\n  const action = async (callback = () => { }) => {\n    try {\n      loading.value = true\n      const response = await store.dispatch('billing/unpaidBilling')\n      isFunction(callback) && callback(response)\n      return response\n    } finally {\n      loading.value = false\n    }\n  }\n  return {\n    loading,\n    action\n  }\n}\n\nconst useResubsLocation = () => {\n  const { action: actionUnpaidBilling } = useUnpaidBilling()\n  const form = reactive({\n    locations: [],\n    transfers: []\n  })\n  const loading = ref(false)\n  const removeLocation = async (callback = () => { }) => {\n    loading.value = true\n    try {\n      const data = form.transfers.map(location => ({\n        store_id: location.id,\n        new_store_id: location.transfer\n      }))\n\n      await store.dispatch('billing/removeLocation', {\n        unsubscribe_location: data\n      })\n      // (async () => {\n      //   const newWindow = window.open()\n      //   await actionUnpaidBilling((response) => {\n      //     const { invoice: invoiceUrl } = response\n      //     if (!invoiceUrl) return null\n      //     newWindow.location = invoiceUrl\n      //   })\n      // })\n      isFunction(callback) && callback(null)\n    } catch (err) {\n      isFunction(callback) && callback(err)\n    } finally {\n      loading.value = false\n    }\n  }\n\n  return {\n    form,\n    loading,\n    removeLocation\n  }\n}\nconst useResubsLocationForm = () => {\n  const loading = reactive({\n    location: false,\n    transfer: false\n  })\n  const data = reactive({\n    locations: []\n  })\n  const query = ref({\n    page: 1,\n    limit: 10\n  })\n\n  const showLocation = async () => {\n    try {\n      loading.location = true\n      const response = await store.dispatch('billing/showLocation')\n      data.locations = (response?.data?.length && response.data.map(location => ({\n        ...location,\n        checked: false\n      }))) || []\n    } catch (error) {\n      data.locations = []\n    } finally {\n      loading.location = false\n    }\n  }\n\n  return {\n    loading,\n    data,\n    query,\n    showLocation\n  }\n}\n\nexport {\n  useLegacyPlan,\n  usePlan,\n  useBilling,\n  useCancelSubscription,\n  useUnpaidBilling,\n  useResubsLocation,\n  useResubsLocationForm\n}"],"names":["usePlan","loading","reactive","all","checkout","selectedSubscriptionOption","ref","selectedPlan","price_id","total_selected_location","planOptions","monthly","annually","plans","computed","value","sort","a","b","formatPlans","plans2","map","plan","planId","__spreadProps","__spreadValues","package_id","plansDetail","find","id","price","is_current_plan","current_price_id","saving_amount","subscriptionOptions","label","getPlans","async","availablePlans","store","dispatch","monthlyPlans","yearly","annuallyPlans","err","console","warn","checkoutPlanWithPriceId","data","callback","priceId","total_location","totalLocation","payload","Error","checkoutUrl","isFunction","unsetSelectedPlan","useCancelSubscription","feedback","note","password","action","useResubsLocation","useUnpaidBilling","form","locations","transfers","removeLocation","location","store_id","new_store_id","transfer","unsubscribe_location","useResubsLocationForm","query","page","limit","showLocation","response","_a","length","checked","error"],"mappings":"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"}