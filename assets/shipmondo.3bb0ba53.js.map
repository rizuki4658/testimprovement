{"version":3,"file":"shipmondo.3bb0ba53.js","sources":["../../src/composable/integration/shipmondo.js"],"sourcesContent":["import { reactive, computed } from 'vue'\nimport { useStore } from 'vuex'\nimport { required } from '@/validations/index'\nimport { isFunction } from 'utils/is'\n\nexport const useConnect = () => {\n  const store = useStore()\n  const rules = reactive({\n    username: {\n      required\n    },\n    password: {\n      required\n    }\n  })\n\n  const credentials = computed(\n    () => store.state.integration.shipmondo.connect.credentials\n  )\n  const loading = computed(\n    () => store.state.integration.shipmondo.loading.connect\n  )\n\n  const setCredential = (credentials) =>\n    store.commit('integration/shipmondo/SET_CREDENTIAL', credentials)\n  const connect = async () => {\n    try {\n      store.commit('integration/shipmondo/SET_CONNECT_LOADING', true)\n      await store.dispatch('integration/shipmondo/connect')\n    } finally {\n      store.commit('integration/shipmondo/SET_CONNECT_LOADING', false)\n    }\n  }\n  return {\n    loading,\n    rules,\n    credentials,\n    setCredential,\n    connect\n  }\n}\n\nexport const useShippingKit = () => {\n  const store = useStore()\n  const loading = computed(\n    () => store.state.integration.shipmondo.loading.shippingKit\n  )\n  const shippingKit = computed({\n    get: () => ({ ...store.state.integration.shipmondo.shippingKit }),\n    set: (newValue) => {\n      store.commit('integration/shipmondo/SET_SHIPPING_KIT', newValue)\n    }\n  })\n  const fetchShippingKit = async () => {\n    try {\n      store.commit('integration/shipmondo/SET_LOADING_FETCH_SHIPPING_KIT', true)\n      // await store.dispatch('integration/shipmondo/fetchShippingKit')\n    } finally {\n      store.commit(\n        'integration/shipmondo/SET_LOADING_FETCH_SHIPPING_KIT',\n        false\n      )\n    }\n  }\n  const updateShippingKit = async () => {\n    try {\n      store.commit(\n        'integration/shipmondo/SET_LOADING_UPDATE_SHIPPING_KIT',\n        true\n      )\n      // await store.dispatch('integration/shipmondo/updateShippingKit')\n    } finally {\n      store.commit(\n        'integration/shipmondo/SET_LOADING_UPDATE_SHIPPING_KIT',\n        false\n      )\n    }\n  }\n  return {\n    store,\n    loading,\n    shippingKit,\n    fetchShippingKit,\n    updateShippingKit\n  }\n}\n\nexport const useShippingProvider = () => {\n  const store = useStore()\n  const carriers = computed(\n    () => store.state.integration.shipmondo.shippingProvider.carriers\n  )\n  const filters = computed(\n    () => store.state.integration.shipmondo.shippingProvider.filters\n  )\n  const selectedCarrier = computed(\n    () => store.getters['integration/shipmondo/selectedCarrier']\n  )\n  const loading = computed(() => store.state.integration.shipmondo.loading)\n  const fetchAll = async () => {\n    try {\n      store.commit('integration/shipmondo/SET_LOADING_FETCH_ALL', true)\n      await store.dispatch('integration/shipmondo/fetchAll')\n    } finally {\n      store.commit('integration/shipmondo/SET_LOADING_FETCH_ALL', false)\n    }\n  }\n  const updateCarrier = async (callback = () => {}) => {\n    try {\n      store.commit('integration/shipmondo/SET_LOADING_UPDATE_CARRIER', true)\n      await store.dispatch('integration/shipmondo/updateCarrier')\n      isFunction(callback) && callback(null, null)\n    } catch (err) {\n      isFunction(callback) && callback(err, null)\n    } finally {\n      store.commit('integration/shipmondo/SET_LOADING_UPDATE_CARRIER', false)\n    }\n  }\n  const selectCarrier = (carrier) =>\n    store.commit('integration/shipmondo/SET_SELECTED_CARRIER', carrier)\n  const resetSelectedCarrier = () =>\n    store.commit('integration/shipmondo/RESET_SELECTED_CARRIER')\n  return {\n    loading,\n    carriers,\n    selectedCarrier,\n    filters,\n    fetchAll,\n    updateCarrier,\n    selectCarrier,\n    resetSelectedCarrier\n  }\n}\n\nexport const useConfig = () => {\n  const store = useStore()\n  const loading = computed(() => store.state.integration.shipmondo.loading)\n  const tabs = computed(() => [\n    {\n      id: 1,\n      name: 'Shipping Provider',\n      to: {\n        name: 'integrationShipmondoConfigShippingProvider'\n      }\n    },\n    // {\n    //   id: 2,\n    //   name: 'Edit Shipping Kit',\n    //   to: {\n    //     name: 'integrationShipmondoConfigShippingKit'\n    //   }\n    // }\n  ])\n  const checkIntegrationStatus = async () => {\n    try {\n      store.commit('integration/shipmondo/SET_LOADING_INTEGRATION_CHECKS', true)\n      const integrations = await store.dispatch('integration/all')\n      const integration = integrations.find(\n        (integration) => integration.id == 17\n      )\n      return integration?.is_ready == 1\n    } finally {\n      store.commit(\n        'integration/shipmondo/SET_LOADING_INTEGRATION_CHECKS',\n        false\n      )\n    }\n  }\n\n  return {\n    tabs,\n    loading,\n    checkIntegrationStatus\n  }\n}\n\nexport const useStatus = () => {\n  const store = useStore()\n  const status = computed(() => store.state.integration.shipmondo.status)\n  const loading = computed(\n    () => store.state.integration.shipmondo.loading.shippingProvider.fetchAll\n  )\n  const { fetchAll: fetchStatus } = useShippingProvider()\n  return {\n    status,\n    loading,\n    fetchStatus\n  }\n}\n"],"names":["useConnect","store","useStore","rules","reactive","username","required","password","credentials","computed","state","integration","shipmondo","connect","loading","setCredential","credentials2","commit","async","dispatch","useShippingKit","shippingKit","get","__spreadValues","set","newValue","fetchShippingKit","updateShippingKit","useShippingProvider","carriers","shippingProvider","filters","selectedCarrier","getters","fetchAll","updateCarrier","callback","isFunction","err","selectCarrier","carrier","resetSelectedCarrier","useConfig","tabs","id","name","to","checkIntegrationStatus","find","integration2","is_ready","useStatus","status","fetchStatus"],"mappings":"gWAKY,MAACA,EAAa,KACxB,MAAMC,EAAQC,IACRC,EAAQC,EAAS,CACrBC,SAAU,CACRC,SAAAA,GAEFC,SAAU,CACRD,SAAAA,KAIEE,EAAcC,GAClB,IAAMR,EAAMS,MAAMC,YAAYC,UAAUC,QAAQL,cAgB3C,MAAA,CACLM,QAfcL,GACd,IAAMR,EAAMS,MAAMC,YAAYC,UAAUE,QAAQD,UAehDV,MAAAA,EACAK,YAAAA,EACAO,cAdqBC,GACrBf,EAAMgB,OAAO,uCAAwCD,GAcrDH,QAbcK,UACV,IACFjB,EAAMgB,OAAO,6CAA6C,SACpDhB,EAAMkB,SAAS,iCACb,QACRlB,EAAMgB,OAAO,6CAA6C,OAYnDG,EAAiB,KAC5B,MAAMnB,EAAQC,IACRY,EAAUL,GACd,IAAMR,EAAMS,MAAMC,YAAYC,UAAUE,QAAQO,cAE5CA,EAAcZ,EAAS,CAC3Ba,IAAK,uHAAOC,CAAA,GAAKtB,EAAMS,MAAMC,YAAYC,UAAUS,aACnDG,IAAMC,IACJxB,EAAMgB,OAAO,yCAA0CQ,MA4BpD,MAAA,CACLxB,MAAAA,EACAa,QAAAA,EACAO,YAAAA,EACAK,iBA7BuBR,UACnB,IACFjB,EAAMgB,OAAO,wDAAwD,GAE7D,QACRhB,EAAMgB,OACJ,wDACA,KAuBJU,kBAnBwBT,UACpB,IACFjB,EAAMgB,OACJ,yDACA,GAGM,QACRhB,EAAMgB,OACJ,yDACA,OAaKW,EAAsB,KACjC,MAAM3B,EAAQC,IACR2B,EAAWpB,GACf,IAAMR,EAAMS,MAAMC,YAAYC,UAAUkB,iBAAiBD,WAErDE,EAAUtB,GACd,IAAMR,EAAMS,MAAMC,YAAYC,UAAUkB,iBAAiBC,UAErDC,EAAkBvB,GACtB,IAAMR,EAAMgC,QAAQ,2CA0Bf,MAAA,CACLnB,QAzBcL,GAAS,IAAMR,EAAMS,MAAMC,YAAYC,UAAUE,UA0B/De,SAAAA,EACAG,gBAAAA,EACAD,QAAAA,EACAG,SA5BehB,UACX,IACFjB,EAAMgB,OAAO,+CAA+C,SACtDhB,EAAMkB,SAAS,kCACb,QACRlB,EAAMgB,OAAO,+CAA+C,KAwB9DkB,cArBoBjB,MAAOkB,EAAW,YAClC,IACFnC,EAAMgB,OAAO,oDAAoD,SAC3DhB,EAAMkB,SAAS,uCACVkB,EAAAD,IAAaA,EAAS,KAAM,MAAA,MAChCE,GACID,EAAAD,IAAaA,EAASE,EAAK,MAC9B,QACRrC,EAAMgB,OAAO,oDAAoD,KAcnEsB,cAXqBC,GACrBvC,EAAMgB,OAAO,6CAA8CuB,GAW3DC,qBAV2B,IAC3BxC,EAAMgB,OAAO,kDAaJyB,EAAY,KACvB,MAAMzC,EAAQC,IACRY,EAAUL,GAAS,IAAMR,EAAMS,MAAMC,YAAYC,UAAUE,UAiC1D,MAAA,CACL6B,KAjCWlC,GAAS,IAAM,CAC1B,CACEmC,GAAI,EACJC,KAAM,oBACNC,GAAI,CACFD,KAAM,kDA6BV/B,QAAAA,EACAiC,uBAnB6B7B,UACzB,IACFjB,EAAMgB,OAAO,wDAAwD,GAC/D,MACAN,SADqBV,EAAMkB,SAAS,oBACT6B,MAC9BC,GAAkC,IAAlBA,EAAYL,KAE/B,OAAgC,qBAAZM,UACZ,QACRjD,EAAMgB,OACJ,wDACA,OAYKkC,EAAY,KACvB,MAAMlD,EAAQC,IACRkD,EAAS3C,GAAS,IAAMR,EAAMS,MAAMC,YAAYC,UAAUwC,SAC1DtC,EAAUL,GACd,IAAMR,EAAMS,MAAMC,YAAYC,UAAUE,QAAQgB,iBAAiBI,YAE3DA,SAAUmB,GAAgBzB,IAC3B,MAAA,CACLwB,OAAAA,EACAtC,QAAAA,EACAuC,YAAAA"}