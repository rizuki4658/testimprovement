{"version":3,"file":"Input.f4f0e4da.js","sources":["../../src/components/BulkImeiSN/Input.vue","../../src/assets/icon/scanner-gun.svg"],"sourcesContent":["<template>\n  <div v-if=\"imeiInput\" class=\"flex items-center gap-x-2 mb-2\">\n    <img src=\"@/assets/icon/scanner-gun.svg\" />\n    <div class=\"font-semibold text-sm\">\n      Using a scanner, continuously scan IMEI/SN barcodes below:\n      <Tooltip v-if=\"limited\" placement=\"top\">\n        <template #content>\n          <div :style=\"{ maxWidth: '300px' }\">\n            You can only add up to {{ qty }} IMEI/SNs lines.\n          </div>\n        </template>\n        <template #default>\n          <i\n            class=\"material-icons cursor-pointer\"\n            style=\"line-height: 1!important;\">\n            info\n          </i>\n        </template>\n      </Tooltip>\n    </div>\n  </div>\n  <div\n    :class=\"[\n      'bulk-imei-sn',\n      validate.imeiSn.$error && 'error'\n    ]\">\n    <div ref=\"refLines\" class=\"bulk-imei-sn-lines\" />\n    <textarea\n      ref=\"refInput\"\n      v-model=\"imeiSn\"\n      :block=\"block\"\n      :disabled=\"disabled\"\n      :rows=\"String(qty || rows)\"\n      class=\"w-full p-2.5\"\n      @keydown=\"validateRows\"\n      @input=\"inputImei\"\n    />\n  </div>\n  <div\n    v-if=\"validate.imeiSn.$error\"\n    class=\"text-red-base text-sm space-y-4\">\n    <!-- <span v-if=\"validate?.imeiSn?.required?.$invalid\">\n      {{ messages.required }}\n    </span> -->\n    <span v-if=\"validate?.imeiSn?.maxRows?.$invalid\">\n      {{ messages.maxRows }}\n    </span>\n  </div>\n</template>\n\n<script>\nimport { ref, toRefs, computed, defineComponent, onMounted, nextTick } from 'vue'\n\nimport { useVuelidate } from '@vuelidate/core'\nimport { required } from \"@vuelidate/validators\"\nimport debounce from 'utils/debounce'\n\n// import Input from 'bbUi/components/input/input.vue'\n\nexport default defineComponent({\n  name: 'BulkImeiSNInput',\n  components: {\n    // Input\n  },\n  props: {\n    modelValue: {\n      type: String,\n      default: undefined\n    },\n    block: {\n      type: Boolean,\n      default: true\n    },\n    qty: {\n      type: Number,\n      default: 1\n    },\n    rows: {\n      type: String,\n      default: '5'\n    },\n    limited: {\n      type: Boolean,\n      default: true\n    },\n    imeiInput: {\n      type: Boolean,\n      default: true\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    }\n  },\n  emits: ['update:modelValue'],\n  setup(props, ctx) {\n    const refInput = ref()\n    const refLines = ref()\n    const imeiSn = computed({\n      get: () => props.modelValue,\n      set: (val) => ctx.emit('update:modelValue', val)\n    })\n    const rules = computed(() => ({\n      imeiSn: {\n        maxRows: (value) => {\n          if (!props.limited) return true\n          if (!value) return true\n          const lines = value.split('\\n').length\n          return lines <= props.qty\n        }\n      }\n    }))\n    const messages = computed(() => ({\n      // required: 'This field is required.',\n      maxRows: `You have exceeded the maximum number of lines. The limit is ${props.qty}.`\n    }))\n\n    const validate = useVuelidate(rules, { imeiSn }, {\n      $lazy: true\n    })\n\n    const validateRows = async (e) => {\n      if (!props.limited) return\n      const lines = imeiSn.value.split('\\n')\n      const cursorPosition = e.target.selectionStart\n      const currentLineIndex = getLineIndexAtCursor(cursorPosition)\n      const lastLineIndex = props.qty - 1\n\n      if (e.key === 'Enter') {\n        if (canAddNewLine(lines, currentLineIndex)) {\n          return await validate.value.$validate()\n        } else {\n          e.preventDefault()\n\n          if (currentLineIndex < lastLineIndex) {\n            const nextLineIndex = currentLineIndex + 1\n            const nextLineStartPosition = getLineStartPosition(nextLineIndex)\n\n            if (lines[nextLineIndex].trim() !== '') {\n              const endOfLinePosition = getLineEndPosition(nextLineIndex)\n              nextTick(() => {\n                e.target.setSelectionRange(endOfLinePosition, endOfLinePosition)\n              })\n            } else {\n              nextTick(() => {\n                e.target.setSelectionRange(nextLineStartPosition, nextLineStartPosition)\n              })\n            }\n          }\n        }\n      }\n    }\n    const inputImei = () => {\n      if (!props.limited) return\n      const lines = imeiSn.value.split('\\n')\n      if (lines.length > props.qty) {\n        imeiSn.value = lines.slice(0, props.qty).join('\\n')\n      }\n    }\n    const getLineIndexAtCursor = (position) => {\n      const lines = imeiSn.value.split('\\n')\n      let charCount = 0\n\n      for (let i = 0; i < lines.length; i++) {\n        charCount += lines[i].length + 1\n        if (position < charCount) return i\n      }\n\n      return lines.length - 1\n    }\n    const getLineStartPosition = (lineIndex) => {\n      const lines = imeiSn.value.split('\\n')\n      let charCount = 0\n\n      for (let i = 0; i < lineIndex; i++) {\n        charCount += lines[i].length + 1\n      }\n\n      return charCount\n    }\n    const getLineEndPosition = (lineIndex) => {\n      const lines = imeiSn.value.split('\\n')\n      let charCount = 0\n\n      for (let i = 0; i <= lineIndex; i++) {\n        charCount += lines[i].length\n      }\n\n      return charCount + lineIndex\n    }\n    const canAddNewLine = (lines, currentLineIndex) => {\n      const lastLineIndex = props.qty - 1\n\n      if (lines.length < props.qty) return true\n\n      for (let i = 0; i < lastLineIndex; i++) {\n        if (lines[i].trim() === '') return false\n      }\n\n      if (currentLineIndex === lastLineIndex && lines[lastLineIndex].trim() !== '') {\n        return true\n      }\n\n      return false\n    }\n\n    onMounted(() => {\n      const textAreaStyles = window.getComputedStyle(refInput.value)\n      const styleProp = [\n        'fontFamily',\n        'fontSize',\n        'fontWeight',\n        'letterSpacing',\n        'lineHeight',\n        'padding',\n      ]\n\n      styleProp.forEach((property) => {\n        refLines.value.style[property] = textAreaStyles[property]\n      })\n\n      const parseValue = (v) => v.endsWith('px') ? parseInt(v.slice(0, -2), 10) : 0\n\n      const font = `${textAreaStyles.fontSize} ${textAreaStyles.fontFamily}`\n      const paddingLeft = parseValue(textAreaStyles.paddingLeft)\n      const paddingRight = parseValue(textAreaStyles.paddingRight)\n\n      const canvas = document.createElement('canvas')\n      const context = canvas.getContext('2d')\n      context.font = font\n\n      const calculateNumLines = (str) => {\n        const textareaWidth = refInput.value.getBoundingClientRect().width - paddingLeft - paddingRight\n        const words = str.split(' ')\n        let lineCount = 0\n        let currentLine = ''\n        for (let i = 0; i < words.length; i++) {\n          const wordWidth = context.measureText(words[i] + ' ').width;\n          const lineWidth = context.measureText(currentLine).width;\n\n          if (lineWidth + wordWidth > textareaWidth) {\n            lineCount++;\n            currentLine = words[i] + ' '\n          } else {\n            currentLine += words[i] + ' '\n          }\n        }\n\n        if (currentLine.trim() !== '') {\n          lineCount++;\n        }\n\n        return lineCount\n      }\n\n      const calculateLineNumbers = () => {\n        const lines = refInput.value.value.split('\\n')\n        const numLines = lines.map((line) => calculateNumLines(line))\n\n        let lineNumbers = []\n        let i = 1\n        while (numLines.length > 0) {\n          const numLinesOfSentence = numLines.shift()\n          lineNumbers.push(i)\n          if (numLinesOfSentence > 1) {\n            Array(numLinesOfSentence - 1)\n              .fill('')\n              .forEach((_) => lineNumbers.push(''))\n          }\n          i++;\n        }\n\n        return lineNumbers\n      }\n\n      const displayLineNumbers = () => {\n        const lineNumbers = calculateLineNumbers()\n        refLines.value.innerHTML = Array.from({\n          length: lineNumbers.length\n        }, (_, i) => `<div>${lineNumbers[i] || '&nbsp;'}</div>`).join('')\n      }\n\n      refInput.value.addEventListener('input', () => {\n        displayLineNumbers()\n      })\n\n      displayLineNumbers()\n\n      const ro = new ResizeObserver(() => {\n        if (!refInput.value || !refLines.value) return\n        const rect = refInput.value.getBoundingClientRect()\n        refLines.value.style.height = `${rect.height}px`\n        displayLineNumbers()\n      })\n      ro.observe(refInput.value)\n\n      refInput.value.addEventListener('scroll', () => {\n        refLines.value.scrollTop = refInput.value.scrollTop\n      })\n    })\n\n    return {\n      imeiSn,\n      refInput,\n      refLines,\n      validate,\n      messages,\n      inputImei,\n      validateRows,\n      canAddNewLine,\n      getLineEndPosition,\n      getLineIndexAtCursor,\n      getLineStartPosition\n    }\n  }\n})\n</script>\n\n<style lang=\"scss\" scoped>\n.bulk-imei-sn {\n  @apply flex overflow-hidden border border-grey-01 rounded-md p-2 transition-all ease-in-out duration-300;\n\n  .bulk-imei-sn-lines {\n    @apply overflow-hidden text-right p-1.5 text-grey-02;\n  }\n\n  textarea {\n    @apply w-full p-2.5;\n  }\n\n  &:has(textarea:focus) {\n    @apply border-teal-04;\n  }\n\n  &.error {\n    // @apply border-red-base;\n\n    &:has(textarea:focus) {\n      @apply border-red-base;\n    }\n  }\n}\n</style>\n","export default \"__VITE_ASSET__156d109f__\""],"names":["_sfc_main","defineComponent","name","components","props","modelValue","type","String","default","block","Boolean","qty","Number","rows","limited","imeiInput","disabled","emits","[object Object]","ctx","refInput","ref","refLines","imeiSn","computed","get","set","val","emit","rules","maxRows","value","split","length","messages","validate","useVuelidate","$lazy","getLineIndexAtCursor","position","lines","charCount","i","getLineStartPosition","lineIndex","getLineEndPosition","canAddNewLine","currentLineIndex","lastLineIndex","trim","onMounted","textAreaStyles","window","getComputedStyle","forEach","property","style","parseValue","v","endsWith","parseInt","slice","font","fontSize","fontFamily","paddingLeft","paddingRight","context","document","createElement","getContext","calculateLineNumbers","numLines","map","line","str","textareaWidth","getBoundingClientRect","width","words","lineCount","currentLine","wordWidth","measureText","calculateNumLines","lineNumbers","numLinesOfSentence","shift","push","Array","fill","_","displayLineNumbers","innerHTML","from","join","addEventListener","ResizeObserver","rect","height","observe","scrollTop","inputImei","validateRows","async","e","cursorPosition","target","selectionStart","key","$validate","preventDefault","nextLineIndex","nextLineStartPosition","endOfLinePosition","nextTick","setSelectionRange","_hoisted_2","class","_openBlock","_createElementBlock","_Fragment","_ctx","_hoisted_1","_cache","src","_createTextVNode","content","_withCtx","_createElementVNode","line-height","_createCommentVNode","_hoisted_4","_withDirectives","onUpdate:modelValue","$event","onKeydown","args","$error","_hoisted_6","_b","$invalid"],"mappings":"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"}