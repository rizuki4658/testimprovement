{"version":3,"file":"index.2fb3814c.js","sources":["../../src/validations/index.js"],"sourcesContent":["\nimport * as validators from '@vuelidate/validators'\n\nconst capitalizeFirstLetter = (string) => {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nconst customMessage = (validator, name = '', param = {}) => validators.helpers.withMessage((prototype) => {\n    if (prototype.$validator === 'email') {\n        return `${prototype.$property ? capitalizeFirstLetter(prototype.$property) : 'This field'} is not a valid email address`\n    }\n    if (prototype.$validator === 'numeric'){\n        return `${prototype.$property ? capitalizeFirstLetter(prototype.$property) : 'This field'} must be a number`\n    }\n    if (prototype.$validator === 'minLength') {\n        return `This field has a value of '${prototype.$model}' but must have a min length of ${prototype.$params.min}`\n    }\n    if (name === 'validAddress') {\n        return 'Please select a valid location from autocomplete list'\n    }\n    if (name === 'fileSize') {\n        return `File size must be less than ${param.maxKB}`\n    }\n    if (name === 'fileType') {\n        return `File type must be ${param.type}`\n    }\n    // Untuk validator message\n    // Field name ngambil dari attribute name di html jadi pastikan harus diisi\n    // Jika tidak ada hanya akan memunculkan kata \"This field\"\n    return `${prototype.$property ? capitalizeFirstLetter(prototype.$property.replace(/_/g, ' ')) : 'This field'} is required`\n}, validator)\n\nexport const required = customMessage(validators.required)\nexport const email = customMessage(validators.email)\nexport const numeric = customMessage(validators.numeric)\nexport const validAddress = customMessage(validators.sameAs(true), 'validAddress')\nexport const minLength = (length) => {\n    return customMessage(validators.minLength(length))\n}\nexport const maxLength = (length) => validators.maxLength(length)\nexport const url = validators.url\nexport const fileSize = (maxKB = 500) =>\n  customMessage((value) => {\n    if (!value || !value.size) return true\n    const sizeInKB = value.size / 1024\n    return sizeInKB <= maxKB\n  }, 'fileSize', { maxKB })\n\nexport const fileType = (expectedType = 'image/svg+xml') =>\n  customMessage((value) => {\n    if (!value || !value.type) return true\n    return value.type === expectedType\n  }, 'fileType', { type: expectedType })"],"names":["capitalizeFirstLetter","string","charAt","toUpperCase","slice","customMessage","validator","name","param","validators.helpers","withMessage","prototype","$validator","$property","$model","$params","min","maxKB","type","replace","required","validators.required","email","validators.email","validators.numeric","validAddress","validators.sameAs","minLength","length","validators.minLength","maxLength","validators.maxLength","url","validators.url","fileSize","value","size","fileType","expectedType"],"mappings":"yFAGA,MAAMA,EAAyBC,GACpBA,EAAOC,OAAO,GAAGC,cAAgBF,EAAOG,MAAM,GAGnDC,EAAgB,CAACC,EAAWC,EAAO,GAAIC,EAAQ,KAAOC,EAAmBC,aAAaC,GAC3D,UAAzBA,EAAUC,WACH,GAAGD,EAAUE,UAAYb,EAAsBW,EAAUE,WAAa,4CAEpD,YAAzBF,EAAUC,WACH,GAAGD,EAAUE,UAAYb,EAAsBW,EAAUE,WAAa,gCAEpD,cAAzBF,EAAUC,WACH,8BAA8BD,EAAUG,yCAAyCH,EAAUI,QAAQC,MAEjG,iBAATT,EACO,wDAEE,aAATA,EACO,+BAA+BC,EAAMS,QAEnC,aAATV,EACO,qBAAqBC,EAAMU,OAK/B,GAAGP,EAAUE,UAAYb,EAAsBW,EAAUE,UAAUM,QAAQ,KAAM,MAAQ,4BACjGb,GAEUc,EAAWf,EAAcgB,GACzBC,EAAQjB,EAAckB,GACZlB,EAAcmB,GACzB,MAACC,EAAepB,EAAcqB,GAAkB,GAAO,gBACtDC,EAAaC,GACfvB,EAAcwB,EAAqBD,IAEjCE,EAAaF,GAAWG,EAAqBH,GAC7CI,EAAMC,EACNC,EAAW,CAACjB,EAAQ,MAC/BZ,GAAe8B,IACT,IAACA,IAAUA,EAAMC,KAAa,OAAA,EAElC,OADiBD,EAAMC,KAAO,MACXnB,IAClB,WAAY,CAAEA,MAAAA,IAENoB,EAAW,CAACC,EAAe,kBACtCjC,GAAe8B,IACRA,IAAUA,EAAMjB,MACdiB,EAAMjB,OAASoB,GACrB,WAAY,CAAEpB,KAAMoB"}